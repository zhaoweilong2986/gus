openapi: 3.0.0
info:
  version: 1.1.7
  title: Moneris Internal API
  description: Moneris API Platform
  termsOfService: https://developer.moneris.com/terms/
  contact:
    name: Moneris Developer Support (MonDev)
    url: https://developers.moneris.com
    email: developersupport@moneris.com
  license:
    name: Moneris
    url: https://developer.moneris.com/license
  x-audience: external-public
servers:
  - url: https://api.moneris.io
paths:
  /payments:
    parameters:
      - $ref: '#/components/parameters/apiVersion'
      - $ref: '#/components/parameters/correlationId'
      - $ref: '#/components/parameters/prm-common_apiVersion'
      - $ref: '#/components/parameters/xMerchantId'
      - $ref: '#/components/parameters/xStoreId'
      - $ref: '#/components/parameters/xApiToken'
    get:
      summary: List Payments
      description: Returns a paginated list of payments.
      operationId: getPayments
      security:
        - OAuth2:
            - payment.read
        - OAuth2:
            - payment.write
        - ApiKeyAuth: []
      tags:
        - Payments
      parameters:
        - $ref: '#/components/parameters/pageBeforeCursor'
        - $ref: '#/components/parameters/pageLimit'
        - $ref: '#/components/parameters/createdFrom'
        - $ref: '#/components/parameters/createdTo'
      responses:
        '200':
          description: List of all payments
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentResponseList'
              example:
                data:
                  - paymentId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
                    merchantId: '0123456789101'
                    orderId: 1q2w3e4r5t6t78
                    invoiceNumber: 1a2s3d45v6
                    transactionDateTime: '2019-07-30T06:43:40.252Z'
                    createdAt: '2019-07-30T06:43:40.252Z'
                    modifiedAt: '2019-07-30T06:43:40.252Z'
                    amount:
                      amount: 16000
                      currency: CAD
                    authorizedAmount:
                      amount: 16000
                      currency: CAD
                    capturableAmount:
                      amount: 0
                      currency: CAD
                    amountDetails:
                      subTotalAmount:
                        amount: 14000
                        currency: CAD
                      tipAmount:
                        amount: 150
                        currency: CAD
                    customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
                    paymentMethod:
                      paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
                      merchantId: '0123456789101'
                      cardholderInformation: null
                      contactDetails: null
                      billingAddress: null
                      paymentMethodType: CARD
                      paymentMethodInformation:
                        cardInformation:
                          bankIdentificationNumber: '123456'
                          lastFour: '1234'
                          expiryMonth: 1
                          expiryYear: 2025
                          cardBrand: MASTERCARD
                          cardType: CREDIT
                          cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
                          issuer: RBC
                        paymentAccountReference: '11112222333344445555666677778'
                      paymentMethodStored: DO_NOT_STORE
                      createdAt: '2019-07-30T06:43:40.252Z'
                      modifiedAt: null
                      customData:
                        property1: string
                        property2: string
                    paymentStatus: SUCCEEDED
                    transactionDetails:
                      transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
                      isoResponseCode: 0
                      responseCode: 1
                      message: approved
                      ecommerceIndicator: AUTHENTICATED_ECOMMERCE
                    checkResults:
                      addressVerificationServiceResultCode: M
                      cardSecurityCodeResultCode: MATCH
                      threeDSecureAuthenticationValueResultCode: VISA_CAVV_PASSED_VALIDATION_ATTEMPTED
                    cardOnFileResponse: null
                    refunds: null
                    customData:
                      property1: string
                      property2: string
                  - paymentId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAZ
                    merchantId: '0123456789101'
                    orderId: 1q2w3e4r5t6t78
                    invoiceNumber: 1a2s3d45v6
                    transactionDateTime: '2019-07-30T06:43:40.252Z'
                    createdAt: '2019-07-30T06:43:40.252Z'
                    modifiedAt: '2019-07-30T06:43:40.252Z'
                    amount:
                      amount: 16000
                      currency: CAD
                    authorizedAmount:
                      amount: 16000
                      currency: CAD
                    capturableAmount:
                      amount: 0
                      currency: CAD
                    amountDetails:
                      subTotalAmount:
                        amount: 14000
                        currency: CAD
                      tipAmount:
                        amount: 150
                        currency: CAD
                    customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
                    paymentMethod:
                      paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
                      merchantId: '0123456789101'
                      cardholderInformation: null
                      contactDetails: null
                      billingAddress: null
                      paymentMethodType: CARD
                      paymentMethodInformation:
                        cardInformation:
                          bankIdentificationNumber: '123456'
                          lastFour: '1234'
                          expiryMonth: 1
                          expiryYear: 2025
                          cardBrand: MASTERCARD
                          cardType: CREDIT
                          cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
                          issuer: RBC
                        paymentAccountReference: '11112222333344445555666677778'
                      paymentMethodStored: DO_NOT_STORE
                      createdAt: '2019-07-30T06:43:40.252Z'
                      modifiedAt: null
                      customData:
                        property1: string
                        property2: string
                    paymentStatus: CANCELED
                    transactionDetails:
                      transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
                      isoResponseCode: 0
                      responseCode: 1
                      message: approved
                      ecommerceIndicator: AUTHENTICATED_ECOMMERCE
                    checkResults:
                      addressVerificationServiceResultCode: M
                      cardSecurityCodeResultCode: MATCH
                      threeDSecureAuthenticationValueResultCode: VISA_CAVV_PASSED_VALIDATION_ATTEMPTED
                    cardOnFileResponse: null
                    refunds: null
                    customData:
                      property1: string
                      property2: string
                  - paymentId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAX
                    merchantId: '0123456789101'
                    orderId: 1q2w3e4r5t6t78
                    invoiceNumber: 1a2s3d45v6
                    transactionDateTime: '2019-07-30T06:43:40.252Z'
                    createdAt: '2019-07-30T06:43:40.252Z'
                    modifiedAt: '2019-07-30T06:43:40.252Z'
                    amount:
                      amount: 16000
                      currency: CAD
                    authorizedAmount:
                      amount: 0
                      currency: CAD
                    capturableAmount:
                      amount: 0
                      currency: CAD
                    amountDetails:
                      subTotalAmount:
                        amount: 14000
                        currency: CAD
                      tipAmount:
                        amount: 150
                        currency: CAD
                    customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
                    paymentMethod:
                      paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
                      merchantId: '0123456789101'
                      cardholderInformation: null
                      contactDetails: null
                      billingAddress: null
                      paymentMethodType: CARD
                      paymentMethodInformation:
                        cardInformation:
                          bankIdentificationNumber: '123456'
                          lastFour: '1234'
                          expiryMonth: 1
                          expiryYear: 2025
                          cardBrand: MASTERCARD
                          cardType: CREDIT
                          cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
                          issuer: RBC
                        paymentAccountReference: '11112222333344445555666677778'
                      paymentMethodStored: DO_NOT_STORE
                      createdAt: '2019-07-30T06:43:40.252Z'
                      modifiedAt: null
                      customData:
                        property1: string
                        property2: string
                    paymentStatus: DECLINED
                    transactionDetails:
                      transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
                      isoResponseCode: 421
                      responseCode: 43
                      message: Stolen card, pick up.
                      ecommerceIndicator: AUTHENTICATED_ECOMMERCE
                    checkResults:
                      addressVerificationServiceResultCode: M
                      cardSecurityCodeResultCode: MATCH
                      threeDSecureAuthenticationValueResultCode: VISA_CAVV_PASSED_VALIDATION_ATTEMPTED
                    cardOnFileResponse: null
                    refunds: null
                    customData:
                      property1: string
                      property2: string
                self: /payments?cursor=d41d8cd98f00b&limit=50&api_version=2023-11-01
                first: /payments?cursor=d41d8cd98f00b&limit=50&api_version=2023-11-01
                last: /payments?cursor=d41d8cd98f00b&limit=50&api_version=2023-11-01
                next: null
                previous: null
        '400':
          $ref: '#/components/responses/invalidListbadRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
    post:
      summary: Create Payment
      description: This operation is used to initiate a Payment.
      operationId: createPayments
      security:
        - OAuth2:
            - payment.write
        - ApiKeyAuth: []
      tags:
        - Payments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createPaymentRequest'
            examples:
              regularPurchaseWithPaymentMethodId:
                $ref: '#/components/examples/regularPurchaseWithPaymentMethodId'
              regularPurchaseWithPaymentMethod:
                $ref: '#/components/examples/regularPurchaseWithPaymentMethod'
              preAuthorizationWithPaymentMethodId:
                $ref: '#/components/examples/preAuthorizationWithPaymentMethodId'
      responses:
        '201':
          description: Payment operation created successfully.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentResponse'
              examples:
                PurchaseCompleted:
                  $ref: '#/components/examples/PurchaseCompletedResponse'
                PreauthorizationCompletedResponse:
                  $ref: '#/components/examples/PreauthorizationCompletedResponse'
        '400':
          description: Failed Payment operation result response
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                declined:
                  $ref: '#/components/examples/DeclineErrorResponse'
                invalid_request:
                  $ref: '#/components/examples/InvalidRequestErrorResponse'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
  /payments/{payment-id}:
    parameters:
      - $ref: '#/components/parameters/apiVersion'
      - $ref: '#/components/parameters/correlationId'
      - $ref: '#/components/parameters/prm-common_apiVersion'
      - $ref: '#/components/parameters/paymentId'
      - $ref: '#/components/parameters/xMerchantId'
      - $ref: '#/components/parameters/xStoreId'
      - $ref: '#/components/parameters/xApiToken'
    get:
      summary: Retrieve Payment
      description: Retrieve a payment by its payment Id
      operationId: getPayment
      security:
        - OAuth2:
            - payment.read
        - OAuth2:
            - payment.write
        - ApiKeyAuth: []
      tags:
        - Payments
      responses:
        '200':
          description: The payment corresponding to the provided `payment-id`
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentResponse'
              examples:
                succeeded:
                  $ref: '#/components/examples/PurchaseCompletedResponse'
                authorized:
                  $ref: '#/components/examples/PreauthorizationCompletedResponse'
                declined:
                  $ref: '#/components/examples/PurchaseDeclinedResponse'
                declined_retry:
                  $ref: '#/components/examples/PurchaseDeclinedRetryResponse'
                canceled:
                  $ref: '#/components/examples/PurchaseCanceledResponse'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
  /payments/{payment-id}/cancel:
    parameters:
      - $ref: '#/components/parameters/apiVersion'
      - $ref: '#/components/parameters/correlationId'
      - $ref: '#/components/parameters/prm-common_apiVersion'
      - $ref: '#/components/parameters/paymentId'
      - $ref: '#/components/parameters/xMerchantId'
      - $ref: '#/components/parameters/xStoreId'
      - $ref: '#/components/parameters/xApiToken'
    post:
      summary: Cancel Payment
      description: Cancel a payment. This operation may not be possible if the payment has gone through.
      operationId: cancelPayment
      security:
        - OAuth2:
            - payment.write
        - ApiKeyAuth: []
      tags:
        - Payments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cancelPaymentRequest'
      responses:
        '200':
          description: Payment canceled successfully.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentResponse'
              example:
                paymentId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
                merchantId: '0123456789101'
                orderId: 1q2w3e4r5t6t78
                invoiceNumber: 1a2s3d45v6
                transactionDateTime: '2019-07-30T06:43:40.252Z'
                createdAt: '2019-07-30T06:43:40.252Z'
                modifiedAt: '2019-07-30T06:43:40.252Z'
                amount:
                  amount: 16000
                  currency: CAD
                authorizedAmount:
                  amount: 16000
                  currency: CAD
                capturableAmount:
                  amount: 0
                  currency: CAD
                amountDetails:
                  subTotalAmount:
                    amount: 14000
                    currency: CAD
                  tipAmount:
                    amount: 150
                    currency: CAD
                customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
                paymentMethod:
                  paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
                  merchantId: '0123456789101'
                  cardholderInformation: null
                  contactDetails: null
                  billingAddress: null
                  paymentMethodType: CARD
                  paymentMethodInformation:
                    cardInformation:
                      bankIdentificationNumber: '123456'
                      lastFour: '1234'
                      expiryMonth: 1
                      expiryYear: 2025
                      cardBrand: MASTERCARD
                      cardType: CREDIT
                      cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
                      issuer: RBC
                    paymentAccountReference: '11112222333344445555666677778'
                  paymentMethodStored: DO_NOT_STORE
                  createdAt: '2019-07-30T06:43:40.252Z'
                  modifiedAt: null
                  customData:
                    property1: string
                    property2: string
                paymentStatus: CANCELED
                transactionDetails:
                  transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
                  isoResponseCode: 0
                  responseCode: 1
                  message: approved
                  ecommerceIndicator: AUTHENTICATED_ECOMMERCE
                checkResults:
                  addressVerificationServiceResultCode: M
                  cardSecurityCodeResultCode: MATCH
                  threeDSecureAuthenticationValueResultCode: VISA_CAVV_PASSED_VALIDATION_ATTEMPTED
                cardOnFileResponse: null
                refunds: null
                customData:
                  property1: string
                  property2: string
        '400':
          description: Failed to cancel Payment operation result response
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                declined:
                  $ref: '#/components/examples/DeclineErrorResponse'
                invalid_request:
                  $ref: '#/components/examples/InvalidPurchaseErrorResponse'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
  /payments/{payment-id}/complete:
    parameters:
      - $ref: '#/components/parameters/apiVersion'
      - $ref: '#/components/parameters/correlationId'
      - $ref: '#/components/parameters/prm-common_apiVersion'
      - $ref: '#/components/parameters/paymentId'
      - $ref: '#/components/parameters/xMerchantId'
      - $ref: '#/components/parameters/xStoreId'
      - $ref: '#/components/parameters/xApiToken'
    post:
      summary: Complete Payment
      description: This will effectively capture a payment that has been authorized.
      operationId: completePayment
      security:
        - OAuth2:
            - payment.write
        - ApiKeyAuth: []
      tags:
        - Payments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/completionRequest'
            example:
              idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac2
              invoiceNumber: 1a2s3d45v6
              customData:
                property1: string
                property2: string
              amount:
                amount: 16000
                currency: CAD
      responses:
        '200':
          description: Payment completed successfully.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentResponse'
              example:
                paymentId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
                merchantId: '0123456789101'
                orderId: 1q2w3e4r5t6t78
                invoiceNumber: 1a2s3d45v6
                transactionDateTime: '2019-07-30T06:43:40.252Z'
                createdAt: '2019-07-30T06:43:40.252Z'
                modifiedAt: '2019-07-30T06:43:40.252Z'
                amount:
                  amount: 16000
                  currency: CAD
                authorizedAmount:
                  amount: 16000
                  currency: CAD
                capturableAmount:
                  amount: 0
                  currency: CAD
                amountDetails:
                  subTotalAmount:
                    amount: 14000
                    currency: CAD
                  tipAmount:
                    amount: 150
                    currency: CAD
                customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
                paymentMethod:
                  paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
                  merchantId: '0123456789101'
                  cardholderInformation: null
                  contactDetails: null
                  billingAddress: null
                  paymentMethodType: CARD
                  paymentMethodInformation:
                    cardInformation:
                      bankIdentificationNumber: '123456'
                      lastFour: '1234'
                      expiryMonth: 1
                      expiryYear: 2025
                      cardBrand: MASTERCARD
                      cardType: CREDIT
                      cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
                      issuer: RBC
                    paymentAccountReference: '11112222333344445555666677778'
                  paymentMethodStored: DO_NOT_STORE
                  createdAt: '2019-07-30T06:43:40.252Z'
                  modifiedAt: null
                  customData:
                    property1: string
                    property2: string
                paymentStatus: SUCCEEDED
                transactionDetails:
                  transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
                  isoResponseCode: 0
                  responseCode: 1
                  message: approved
                  ecommerceIndicator: AUTHENTICATED_ECOMMERCE
                checkResults:
                  addressVerificationServiceResultCode: M
                  cardSecurityCodeResultCode: MATCH
                  threeDSecureAuthenticationValueResultCode: VISA_CAVV_PASSED_VALIDATION_ATTEMPTED
                cardOnFileResponse: null
                refunds: null
                customData:
                  property1: string
                  property2: string
        '400':
          description: Failed to complete purchase
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                declined:
                  $ref: '#/components/examples/DeclineErrorResponse'
                invalid_request:
                  $ref: '#/components/examples/InvalidPurchaseErrorResponse'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
  /payment-methods:
    parameters:
      - $ref: '#/components/parameters/apiVersion'
      - $ref: '#/components/parameters/correlationId'
      - $ref: '#/components/parameters/prm-common_apiVersion'
      - $ref: '#/components/parameters/xMerchantId'
      - $ref: '#/components/parameters/xStoreId'
      - $ref: '#/components/parameters/xApiToken'
    get:
      summary: List payment methods
      description: Retrieves a paginated list of payment methods.
      operationId: getPaymentMethods
      security:
        - OAuth2:
            - payment.read
        - OAuth2:
            - payment.write
        - ApiKeyAuth: []
      tags:
        - Payment Methods
      parameters:
        - $ref: '#/components/parameters/pageBeforeCursor'
        - $ref: '#/components/parameters/pageLimit'
        - $ref: '#/components/parameters/createdFrom'
        - $ref: '#/components/parameters/createdTo'
        - $ref: '#/components/parameters/isExpiring'
      responses:
        '200':
          description: Paginated list of payment methods
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentMethodResponseList'
              example:
                data:
                  - paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
                    merchantId: '0123456789101'
                    cardholderInformation: null
                    contactDetails: null
                    billingAddress: null
                    paymentMethodType: CARD
                    paymentMethodInformation:
                      cardInformation:
                        bankIdentificationNumber: '123456'
                        lastFour: '1234'
                        expiryMonth: 1
                        expiryYear: 2023
                        cardBrand: MASTERCARD
                        cardType: CREDIT
                        cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
                        issuer: RBC
                      paymentAccountReference: '11112222333344445555666677778'
                    paymentMethodStored: DO_NOT_STORE
                    createdAt: '2019-07-30T06:43:40.252Z'
                    modifiedAt: '2019-07-30T06:43:40.252Z'
                    customData:
                      property1: string
                      property2: string
                  - paymentMethodId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
                    merchantId: '0123456789101'
                    cardholderInformation:
                      cardholderName: John Doe
                      companyName: SP Ltd
                    contactDetails:
                      phoneNumber: 1-866-319-7450
                      email: moneris@moneris.com
                    billingAddress:
                      unitNumber: 123A
                      streetNumber: '3300'
                      streetName: Bloor Street West
                      city: Toronto
                      province: Ontario
                      postalCode: M8X 2X2
                      country: CA
                    paymentMethodType: TEMPORARY_TOKEN
                    paymentMethodInformation:
                      cardInformation:
                        bankIdentificationNumber: '123456'
                        lastFour: '1234'
                        expiryMonth: 1
                        expiryYear: 2023
                        cardBrand: MASTERCARD
                        cardType: CREDIT
                        cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
                        issuer: RBC
                      paymentAccountReference: '11112222333344445555666677778'
                    paymentMethodStored: DO_NOT_STORE
                    createdAt: '2019-07-30T06:43:40.252Z'
                    modifiedAt: '2019-07-30T06:43:40.252Z'
                    customData:
                      property1: string
                      property2: string
                self: /payment-methods?cursor=d41d8cd98f00b&limit=50&api_version=2023-11-01
                first: /payment-methods?cursor=d41d8cd98f00b&limit=50&api_version=2023-11-01
                last: /payment-methods?cursor=d41d8cd98f00b&limit=50&api_version=2023-11-01
                next": null
                previous: null
        '400':
          $ref: '#/components/responses/invalidListbadRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
    post:
      summary: Create Payment Method
      description: Create a Payment Method.
      operationId: createPaymentMethod
      security:
        - OAuth2:
            - payment.write
        - ApiKeyAuth: []
      tags:
        - Payment Methods
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createPaymentMethodRequest'
            examples:
              card:
                $ref: '#/components/examples/cardPaymentMethodRequest'
              temporary_token:
                $ref: '#/components/examples/temporaryTokenPaymentMethodRequest'
              permanent_token:
                $ref: '#/components/examples/permanentTokenPaymentMethodRequest'
      responses:
        '201':
          description: |
            Payment method created successfully.  Response content contains the created payment method.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentMethodResponse'
              example:
                paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
                merchantId: '0123456789101'
                cardholderInformation:
                  cardholderName: John Doe
                  companyName: SP Ltd
                contactDetails:
                  phoneNumber: 1-866-319-7450
                  email: moneris@moneris.com
                billingAddress:
                  unitNumber: 123A
                  streetNumber: '3300'
                  streetName: Bloor Street West
                  city: Toronto
                  province: Ontario
                  postalCode: M8X 2X2
                  country: CA
                paymentMethodType: CARD
                paymentMethodInformation:
                  cardInformation:
                    bankIdentificationNumber: '123456'
                    lastFour: '1234'
                    expiryMonth: 1
                    expiryYear: 2023
                    cardBrand: MASTERCARD
                    cardType: CREDIT
                    cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
                    issuer: RBC
                  paymentAccountReference: '11112222333344445555666677778'
                paymentMethodStored: DO_NOT_STORE
                createdAt: '2019-07-30T06:43:40.252Z'
                modifiedAt: '2019-07-30T06:43:40.252Z'
                customData:
                  property1: string
                  property2: string
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '409':
          $ref: '#/components/responses/conflict'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'

  /payment-methods/internal/{payment-method-id}:
    parameters:
      - $ref: '#/components/parameters/apiVersion'
      - $ref: '#/components/parameters/correlationId'
      - $ref: '#/components/parameters/paymentMethodId'
      - $ref: '#/components/parameters/xMerchantId'
      - $ref: '#/components/parameters/xStoreId'
      - $ref: '#/components/parameters/xApiToken'
    get:
      summary: Retrieve a Payment Method by Id internally which returns some extra info
      description: Retrieve a Payment Method by Id internally which returns some extra info
      operationId: getPaymentMethodInternal
      security:
        - ApiKeyAuth: []      
      tags:
        - paymentMethodInternal
      responses:
        '200':
          description: Get payment method internal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentMethodResponseInternal'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '500':
          $ref: '#/components/responses/internalServer'
    put:
      summary: Update payment method internal
      description: Update payment method internal
      operationId: updatePaymentMethodInternal
      security:
        - ApiKeyAuth: []      
      tags:
        - paymentMethodInternal
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/paymentMethodRequestInternal'
      responses:
        '200':
          description: Update payment method internal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentMethodResponseInternal'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '500':
          $ref: '#/components/responses/internalServer'
  /payment-methods/{payment-method-id}:
    parameters:
      - $ref: '#/components/parameters/apiVersion'
      - $ref: '#/components/parameters/correlationId'
      - $ref: '#/components/parameters/prm-common_apiVersion'
      - $ref: '#/components/parameters/paymentMethodId'
      - $ref: '#/components/parameters/xMerchantId'
      - $ref: '#/components/parameters/xStoreId'
      - $ref: '#/components/parameters/xApiToken'
    get:
      summary: Retrive Payment Method
      description: Retrieve a Payment Method by Id
      operationId: getPaymentMethod
      security:
        - OAuth2:
            - payment.read
        - OAuth2:
            - payment.write
        - ApiKeyAuth: []
      tags:
        - Payment Methods
      responses:
        '200':
          description: Payment method found and returned in the response.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentMethodResponse'
              example:
                paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
                merchantId: '0123456789101'
                cardholderInformation:
                  cardholderName: John Doe
                  companyName: SP Ltd
                contactDetails:
                  phoneNumber: 1-866-319-7450
                  email: moneris@moneris.com
                billingAddress:
                  unitNumber: 123A
                  streetNumber: '3300'
                  streetName: Bloor Street West
                  city: Toronto
                  province: Ontario
                  postalCode: M8X 2X2
                  country: CA
                paymentMethodType: CARD
                paymentMethodInformation:
                  cardInformation:
                    bankIdentificationNumber: '123456'
                    lastFour: '1234'
                    expiryMonth: 1
                    expiryYear: 2023
                    cardBrand: MASTERCARD
                    cardType: CREDIT
                    cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
                    issuer: RBC
                  paymentAccountReference: '11112222333344445555666677778'
                paymentMethodStored: DO_NOT_STORE
                createdAt: '2019-07-30T06:43:40.252Z'
                modifiedAt: '2019-07-30T06:43:40.252Z'
                customData:
                  property1: string
                  property2: string
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          description: Payment method not found.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                type: https://developer.moneris.com/en/More/Testing/Response%20Codes
                title: NOT_FOUND
                status: 404
                detail: null
                instance: /payment-methods/pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
                category: INVALID_REQUEST_ERROR
                errors: []
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
    put:
      summary: Update Payment method
      description: |
        Update payment method referenced by its Id. 
        Certain details may not be updated if the payment method was used in a transaction.
      operationId: updatePaymentMethod
      security:
        - OAuth2:
            - payment.write
        - ApiKeyAuth: []
      tags:
        - Payment Methods
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updatePaymentMethodRequest'
            examples:
              card:
                $ref: '#/components/examples/updateCardPaymentMethodRequest'
              temporary_token:
                $ref: '#/components/examples/updateTemporaryTokenPaymentMethodRequest'
              permanent_token:
                $ref: '#/components/examples/updatePermanentTokenPaymentMethodRequest'
      responses:
        '200':
          description: Update payment method
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentMethodResponse'
              example:
                paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
                merchantId: '0123456789101'
                cardholderInformation:
                  cardholderName: John Doe
                  companyName: SP Ltd
                contactDetails:
                  phoneNumber: 1-866-319-7450
                  email: moneris@moneris.com
                billingAddress:
                  unitNumber: 123A
                  streetNumber: '3300'
                  streetName: Bloor Street West
                  city: Toronto
                  province: Ontario
                  postalCode: M8X 2X2
                  country: CA
                paymentMethodType: CARD
                paymentMethodInformation:
                  cardInformation:
                    bankIdentificationNumber: '123456'
                    lastFour: '1234'
                    expiryMonth: 1
                    expiryYear: 2023
                    cardBrand: MASTERCARD
                    cardType: CREDIT
                    cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
                    issuer: RBC
                  paymentAccountReference: '11112222333344445555666677778'
                paymentMethodStored: DO_NOT_STORE
                createdAt: '2019-07-30T06:43:40.252Z'
                modifiedAt: '2019-07-30T06:43:40.252Z'
                customData:
                  property1: string
                  property2: string
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          description: Payment method not found.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                type: https://developer.moneris.com/en/More/Testing/Response%20Codes
                title: NOT_FOUND
                status: 404
                detail: null
                instance: /payment-methods/pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
                category: INVALID_REQUEST_ERROR
                errors: []
        '409':
          $ref: '#/components/responses/concurrencyConflict'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
    delete:
      summary: Delete Payment Method
      description: Deletes a payment method.
      operationId: deletePaymentMethod
      security:
        - OAuth2:
            - payment.write
        - ApiKeyAuth: []
      tags:
        - Payment Methods
      responses:
        '204':
          description: |
            Payment method deleted successfully. 
            Response content contains the payment method details.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          description: Payment method not found.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                type: https://developer.moneris.com/en/More/Testing/Response%20Codes
                title: NOT_FOUND
                status: 404
                detail: null
                instance: /payment-methods/pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
                category: INVALID_REQUEST_ERROR
                errors: []
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
  /refunds:
    parameters:
      - $ref: '#/components/parameters/apiVersion'
      - $ref: '#/components/parameters/correlationId'
      - $ref: '#/components/parameters/prm-common_apiVersion'
      - $ref: '#/components/parameters/xMerchantId'
      - $ref: '#/components/parameters/xStoreId'
      - $ref: '#/components/parameters/xApiToken'
    get:
      summary: List Refunds
      description: Returns a paginated list of refund operations.
      operationId: getRefunds
      security:
        - OAuth2:
            - refund.read
        - OAuth2:
            - refund.write
        - ApiKeyAuth: []
      tags:
        - Refunds
      parameters:
        - $ref: '#/components/parameters/pageBeforeCursor'
        - $ref: '#/components/parameters/pageLimit'
        - $ref: '#/components/parameters/createdFrom'
        - $ref: '#/components/parameters/createdTo'
      responses:
        '200':
          description: Refund list successfully returned.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/refundResponseList'
              example:
                data:
                  - refundId: ri0105ARZ3NDEKTSV4RRFFQ69G5FAV
                    paymentId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
                    merchantId: '0123456789101'
                    paymentMethod:
                      paymentMethodId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
                      merchantId: '0123456789101'
                      cardholderInformation:
                        cardholderName: John Doe
                        companyName: SP Ltd
                      contactDetails:
                        phoneNumber: 1-866-319-7450
                        email: moneris@moneris.com
                      billingAddress:
                        unitNumber: 123A
                        streetNumber: '3300'
                        streetName: Bloor Street West
                        city: Toronto
                        province: Ontario
                        postalCode: M8X 2X2
                        country: CA
                      paymentMethodType: CARD
                      paymentMethodInformation:
                        cardInformation:
                          bankIdentificationNumber: '123456'
                          lastFour: '1234'
                          expiryMonth: 1
                          expiryYear: 2023
                          cardBrand: MASTERCARD
                          cardType: CREDIT
                          cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
                          issuer: RBC
                        paymentAccountReference: '11112222333344445555666677778'
                      paymentMethodStored: DO_NOT_STORE
                      createdAt: '2019-07-30T06:43:40.252Z'
                      modifiedAt: '2019-07-30T06:43:40.252Z'
                      customData:
                        property1: string
                        property2: string
                    createdAt: '2019-07-30T06:43:40.252Z'
                    modifiedAt: '2019-07-30T06:43:40.252Z'
                    refundAmount:
                      amount: 1600
                      currency: CAD
                    customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
                    status: SUCCEEDED
                    statusDetails:
                      transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
                      isoResponseCode: 1
                      responseCode: 1
                      message: SUCCESS
                      ecommerceIndicator: AUTHENTICATED_ECOMMERCE
                    reason: Defective product
                    cardOnFileResponse: null
                    customData:
                      property1: string
                      property2: string
                  - refundId: ri0105ARZ3NDEKTSV4RRFFQ69G5FAV
                    paymentId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
                    merchantId: '0123456789101'
                    paymentMethod:
                      paymentMethodId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
                      merchantId: '0123456789101'
                      cardholderInformation:
                        cardholderName: John Doe
                        companyName: SP Ltd
                      contactDetails:
                        phoneNumber: 1-866-319-7450
                        email: moneris@moneris.com
                      billingAddress:
                        unitNumber: 123A
                        streetNumber: '3300'
                        streetName: Bloor Street West
                        city: Toronto
                        province: Ontario
                        postalCode: M8X 2X2
                        country: CA
                      paymentMethodType: CARD
                      paymentMethodInformation:
                        cardInformation:
                          bankIdentificationNumber: '123456'
                          lastFour: '1234'
                          expiryMonth: 1
                          expiryYear: 2023
                          cardBrand: MASTERCARD
                          cardType: CREDIT
                          cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
                          issuer: RBC
                        paymentAccountReference: '11112222333344445555666677778'
                      paymentMethodStored: DO_NOT_STORE
                      createdAt: '2019-07-30T06:43:40.252Z'
                      modifiedAt: '2019-07-30T06:43:40.252Z'
                      customData:
                        property1: string
                        property2: string
                    createdAt: '2019-07-30T06:43:40.252Z'
                    modifiedAt: '2019-07-30T06:43:40.252Z'
                    refundAmount:
                      amount: 1600
                      currency: CAD
                    customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
                    status: DECLINED
                    statusDetails:
                      transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
                      isoResponseCode: 51
                      responseCode: 54
                      message: Expired Card
                      ecommerceIndicator: AUTHENTICATED_ECOMMERCE
                    reason: Defective product
                    cardOnFileResponse: null
                    customData:
                      property1: string
                      property2: string
                self: /refunds?cursor=d41d8cd98f00b&limit=50&api_version=2023-11-01
                first: /refunds?cursor=d41d8cd98f00b&limit=50&api_version=2023-11-01
                last: /refunds?cursor=d41d8cd98f00b&limit=50&api_version=2023-11-01
                next": null
                previous: null
        '400':
          $ref: '#/components/responses/invalidListbadRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
    post:
      summary: Create Refund
      description: |
        This operation is used to create a Refund. 
        For payment refunds, Payment Id is required while payment method is not required.
        For independent refunds, no payment Id is required, however payment method is required.
      operationId: createRefund
      security:
        - OAuth2:
            - refund.write
        - ApiKeyAuth: []
      tags:
        - Refunds
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createRefundRequest'
            examples:
              matching:
                $ref: '#/components/examples/matchingRefundRequest'
      responses:
        '201':
          description: Refund operation result response
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/refundResponse'
              example:
                refundId: ri0105ARZ3NDEKTSV4RRFFQ69G5FAV
                paymentId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
                merchantId: '0123456789101'
                paymentMethod:
                  paymentMethodId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
                  merchantId: '0123456789101'
                  cardholderInformation:
                    cardholderName: John Doe
                    companyName: SP Ltd
                  contactDetails:
                    phoneNumber: 1-866-319-7450
                    email: moneris@moneris.com
                  billingAddress:
                    unitNumber: 123A
                    streetNumber: '3300'
                    streetName: Bloor Street West
                    city: Toronto
                    province: Ontario
                    postalCode: M8X 2X2
                    country: CA
                  paymentMethodType: CARD
                  paymentMethodInformation:
                    cardInformation:
                      bankIdentificationNumber: '123456'
                      lastFour: '1234'
                      expiryMonth: 1
                      expiryYear: 2023
                      cardBrand: MASTERCARD
                      cardType: CREDIT
                      cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
                      issuer: RBC
                    paymentAccountReference: '11112222333344445555666677778'
                  paymentMethodStored: DO_NOT_STORE
                  createdAt: '2019-07-30T06:43:40.252Z'
                  modifiedAt: '2019-07-30T06:43:40.252Z'
                  customData:
                    property1: string
                    property2: string
                createdAt: '2019-07-30T06:43:40.252Z'
                modifiedAt: '2019-07-30T06:43:40.252Z'
                refundAmount:
                  amount: 1600
                  currency: CAD
                customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
                status: SUCCEEDED
                statusDetails:
                  transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
                  isoResponseCode: 1
                  responseCode: 1
                  message: SUCCESS
                  ecommerceIndicator: AUTHENTICATED_ECOMMERCE
                reason: Defective product
                cardOnFileResponse: null
                customData:
                  property1: string
                  property2: string
        '400':
          description: Refund operation declined
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                invalid_request:
                  $ref: '#/components/examples/InvalidRefundErrorResponse'
                declined:
                  $ref: '#/components/examples/exp-refundResponse_DeclineErrorResponse'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
  /refunds/{refund-id}:
    parameters:
      - $ref: '#/components/parameters/apiVersion'
      - $ref: '#/components/parameters/correlationId'
      - $ref: '#/components/parameters/prm-common_apiVersion'
      - $ref: '#/components/parameters/refundId'
      - $ref: '#/components/parameters/xMerchantId'
      - $ref: '#/components/parameters/xStoreId'
      - $ref: '#/components/parameters/xApiToken'
    get:
      summary: Retrieve Refund
      description: Retrieve a refund by its Id.
      operationId: getRefundById
      security:
        - OAuth2:
            - refund.read
        - OAuth2:
            - refund.write
        - ApiKeyAuth: []
      tags:
        - Refunds
      responses:
        '200':
          description: Successfully retrieved the refund corresponding to the provided `refund-id`
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/refundResponse'
              examples:
                succeeded:
                  $ref: '#/components/examples/SucceededRefundResponse'
                declined:
                  $ref: '#/components/examples/DeclinedRefundResponse'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          description: Refund not found.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                type: https://developer.moneris.com/en/More/Testing/Response%20Codes
                title: NOT_FOUND
                status: 404
                detail: null
                instance: /refunds/ri0105ARZ3NDEKTSV4RRFFQ69G5FAV
                category: INVALID_REQUEST_ERROR
                errors: []
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
  /validations:
    description: |
      set up a payment method for future payments. 
      Similar to a payment, but no charge is created.
      Useful when onboarding customers but not charging them right away.
    parameters:
      - $ref: '#/components/parameters/apiVersion'
      - $ref: '#/components/parameters/correlationId'
      - $ref: '#/components/parameters/prm-common_apiVersion'
      - $ref: '#/components/parameters/xMerchantId'
      - $ref: '#/components/parameters/xStoreId'
      - $ref: '#/components/parameters/xApiToken'
    get:
      summary: List of Card Validations
      description: Returns a paginated list of the card validations the were executed.
      operationId: getValidations
      security:
        - OAuth2:
            - payment.read
        - OAuth2:
            - payment.write
        - ApiKeyAuth: []
      tags:
        - Validations
      parameters:
        - $ref: '#/components/parameters/pageBeforeCursor'
        - $ref: '#/components/parameters/pageLimit'
        - $ref: '#/components/parameters/createdFrom'
        - $ref: '#/components/parameters/createdTo'
      responses:
        '200':
          description: List of Card Validations
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationsResponseList'
              example:
                data:
                  - validationId: vi0105ARZ3NDEKTSV4RRFFQ69G5FAV
                    merchantId: '0123456789101'
                    orderId: 1q2w3e4r5t6t78
                    invoiceNumber: 1a2s3d45v6
                    transactionDateTime: '2019-07-30T06:43:40.252Z'
                    createdAt: '2019-07-30T06:43:40.252Z'
                    modifiedAt: null
                    customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
                    paymentMethod:
                      paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
                      merchantId: '0123456789101'
                      cardholderInformation:
                        cardholderName: John Doe
                        companyName: SP Ltd
                      contactDetails: null
                      billingAddress:
                        unitNumber: 123A
                        streetNumber: '3300'
                        streetName: Bloor Street West
                        city: Toronto
                        province: Ontario
                        postalCode: M8X 2X2
                        country: CA
                      paymentMethodType: CARD
                      paymentMethodInformation:
                        cardInformation:
                          bankIdentificationNumber: '123456'
                          lastFour: '1234'
                          expiryMonth: 1
                          expiryYear: 2025
                          cardBrand: MASTERCARD
                          cardType: CREDIT
                          cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
                          issuer: RBC
                        paymentAccountReference: '11112222333344445555666677778'
                      paymentMethodStored: DO_NOT_STORE
                      createdAt: '2019-07-30T06:43:40.252Z'
                      modifiedAt: null
                      customData:
                        property1: string
                        property2: string
                    validationStatus: SUCCEEDED
                    transactionDetails:
                      transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
                      isoResponseCode: 0
                      responseCode: 1
                      message: approved
                      ecommerceIndicator: AUTHENTICATED_ECOMMERCE
                    checkResults:
                      addressVerificationServiceResultCode: M
                      cardSecurityCodeResultCode: MATCH
                      threeDSecureAuthenticationValueResultCode: VISA_CAVV_PASSED_VALIDATION_ATTEMPTED
                    cardOnFileResponse: null
                    customData:
                      property1: string
                      property2: string
                  - validationId: vi0105ARZ3NDEKTSV4RRFFQ69G5FAX
                    merchantId: '0123456789101'
                    orderId: 1q2w3e4r5t6t78
                    invoiceNumber: 1a2s3d45v6
                    transactionDateTime: '2019-07-30T06:43:40.252Z'
                    createdAt: '2019-07-30T06:43:40.252Z'
                    modifiedAt: null
                    customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
                    paymentMethod:
                      paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
                      merchantId: '0123456789101'
                      cardholderInformation:
                        cardholderName: John Doe
                        companyName: SP Ltd
                      contactDetails:
                        phoneNumber: 1-866-319-7450
                        email: moneris@moneris.com
                      billingAddress:
                        unitNumber: 123A
                        streetNumber: '3300'
                        streetName: Bloor Street West
                        city: Toronto
                        province: Ontario
                        postalCode: M8X 2X2
                        country: CA
                      paymentMethodType: CARD
                      paymentMethodInformation:
                        cardInformation:
                          bankIdentificationNumber: '123456'
                          lastFour: '1234'
                          expiryMonth: 1
                          expiryYear: 2025
                          cardBrand: MASTERCARD
                          cardType: CREDIT
                          cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
                          issuer: RBC
                        paymentAccountReference: '11112222333344445555666677778'
                      paymentMethodStored: DO_NOT_STORE
                      createdAt: '2019-07-30T06:43:40.252Z'
                      modifiedAt: null
                      customData:
                        property1: string
                        property2: string
                    validationStatus: DECLINED
                    transactionDetails:
                      transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
                      isoResponseCode: 421
                      responseCode: 43
                      message: Stolen card, pick up.
                      ecommerceIndicator: AUTHENTICATED_ECOMMERCE
                    checkResults:
                      addressVerificationServiceResultCode: M
                      cardSecurityCodeResultCode: MATCH
                      threeDSecureAuthenticationValueResultCode: VISA_CAVV_PASSED_VALIDATION_ATTEMPTED
                    cardOnFileResponse: null
                    customData:
                      property1: string
                      property2: string
                self: /validations?cursor=d41d8cd98f00b&limit=50&api_version=2023-11-01
                first: /validations?cursor=d41d8cd98f00b&limit=50&api_version=2023-11-01
                last: /validations?cursor=d41d8cd98f00b&limit=50&api_version=2023-11-01
                next": null
                previous: null
        '400':
          $ref: '#/components/responses/invalidListbadRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
    post:
      summary: Create Card Validation
      description: Initiate a new Card Validation request.
      operationId: createValidation
      security:
        - OAuth2:
            - payment.write
        - ApiKeyAuth: []
      tags:
        - Validations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createValidationRequest'
            examples:
              with_payment_method_id:
                $ref: '#/components/examples/validationRequestWithPaymentMethodId'
              with_payment_method:
                $ref: '#/components/examples/validationRequestWithPaymentMethodData'
      responses:
        '201':
          description: Validation request created successfully.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationResponse'
        '400':
          description: Failed Validation operation result response
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'

          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                declined:
                  $ref: '#/components/examples/exp-validationResponse_DeclineErrorResponse'
                invalid_request:
                  $ref: '#/components/examples/InvalidRequestErrorResponse'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
  /validations/{validation-id}:
    parameters:
      - $ref: '#/components/parameters/apiVersion'
      - $ref: '#/components/parameters/correlationId'
      - $ref: '#/components/parameters/prm-common_apiVersion'
      - $ref: '#/components/parameters/validationId'
      - $ref: '#/components/parameters/xMerchantId'
      - $ref: '#/components/parameters/xStoreId'
      - $ref: '#/components/parameters/xApiToken'
    get:
      summary: Retrieve Card Validation.
      description: Retrieve a Card Validation by Id.
      operationId: getValidation
      security:
        - OAuth2:
            - payment.read
        - OAuth2:
            - payment.write
        - ApiKeyAuth: []
      tags:
        - Validations
      responses:
        '200':
          description: Retrieve a Card Validation by Id
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationResponse'
              examples:
                succeeded:
                  $ref: '#/components/examples/ValidationSucceededResponse'
                declined:
                  $ref: '#/components/examples/ValidationDeclinedRetryResponse'
                declined_retry:
                  $ref: '#/components/examples/ValidationDeclinedResponse'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          description: Card validation not found
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationResponse'
              example:
                type: https://developer.moneris.com/en/More/Testing/Response%20Codes
                title: NOT_FOUND
                status: 404
                detail: null
                instance: /validations/vi0105ARZ3NDEKTSV4RRFFQ69G5FAV
                category: INVALID_REQUEST_ERROR
                errors: []
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
  /customers:
    description: |
      This API allows to manage past and recurring customers.
      Very useful when tracking and managing charges belonging to the same customer.
    parameters:
      - $ref: '#/components/parameters/apiVersion'
      - $ref: '#/components/parameters/correlationId'
      - $ref: '#/components/parameters/prm-common_apiVersion'
      - $ref: '#/components/parameters/xMerchantId'
      - $ref: '#/components/parameters/xStoreId'
      - $ref: '#/components/parameters/xApiToken'
    get:
      summary: List Customers
      description: Returns a paginated list of customers.
      operationId: getCustomers
      security:
        - OAuth2:
            - customer.read
        - OAuth2:
            - customer.write
        - ApiKeyAuth: []
      tags:
        - Customers
      parameters:
        - $ref: '#/components/parameters/pageBeforeCursor'
        - $ref: '#/components/parameters/pageLimit'
        - $ref: '#/components/parameters/createdFrom'
        - $ref: '#/components/parameters/createdTo'
      responses:
        '200':
          description: List of all customers
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerResponseList'
        '400':
          $ref: '#/components/responses/invalidListbadRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
    post:
      summary: Create Customer
      description: This operation is used to created a new customer.
      operationId: createCustomers
      security:
        - OAuth2:
            - customer.write
        - ApiKeyAuth: []
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createCustomerRequest'
      responses:
        '201':
          description: Customer operation result response
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '409':
          $ref: '#/components/responses/conflict'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
  /customers/{customer-id}:
    parameters:
      - $ref: '#/components/parameters/apiVersion'
      - $ref: '#/components/parameters/correlationId'
      - $ref: '#/components/parameters/prm-common_apiVersion'
      - $ref: '#/components/parameters/customerId'
      - $ref: '#/components/parameters/xMerchantId'
      - $ref: '#/components/parameters/xStoreId'
      - $ref: '#/components/parameters/xApiToken'
    get:
      summary: Retrieve Customer
      description: Retrieve a customer by their Id.
      operationId: getCustomer
      security:
        - OAuth2:
            - customer.read
        - OAuth2:
            - customer.write
        - ApiKeyAuth: []
      tags:
        - Customers
      responses:
        '200':
          description: The customer corresponding to the provided `customerId`
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerResponse'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          description: Customer not found
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                type: https://developer.moneris.com/en/More/Testing/Response%20Codes
                title: NOT_FOUND
                status: 404
                detail: null
                instance: /customers/ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
                category: INVALID_REQUEST_ERROR
                errors: []
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
    put:
      summary: Update Customer
      description: Updates customer's details such as name, address etc...
      operationId: updateCustomer
      security:
        - OAuth2:
            - customer.write
        - ApiKeyAuth: []
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customerRequest'
      responses:
        '200':
          description: Customer updated successfully.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          description: Customer not found
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                type: https://developer.moneris.com/en/More/Testing/Response%20Codes
                title: NOT_FOUND
                status: 404
                detail: null
                instance: /customers/ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
                category: INVALID_REQUEST_ERROR
                errors: []
        '409':
          $ref: '#/components/responses/concurrencyConflict'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
    delete:
      summary: Delete Customer
      description: Delete a customer by their Id
      operationId: deleteCustomer
      security:
        - OAuth2:
            - customer.write
        - ApiKeyAuth: []
      tags:
        - Customers
      responses:
        '204':
          description: Customer deleted successfully.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          description: Customer not found
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                type: https://developer.moneris.com/en/More/Testing/Response%20Codes
                title: NOT_FOUND
                status: 404
                detail: null
                instance: /customers/ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
                category: INVALID_REQUEST_ERROR
                errors: []
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
  /three-d-secure:
    parameters:
      - $ref: '#/components/parameters/apiVersion'
      - $ref: '#/components/parameters/correlationId'
      - $ref: '#/components/parameters/prm-common_apiVersion'
      - $ref: '#/components/parameters/xMerchantId'
      - $ref: '#/components/parameters/xStoreId'
      - $ref: '#/components/parameters/xApiToken'
    post:
      summary: Create Authentication
      description: |
        This operation is used to create an Authentication request. 
        The authentication request is used to start the validation process of the card. 
        The result of this request determines whether 3DS is supported by the card and what type of authentication is required.
      operationId: createAuthentication
      security:
        - OAuth2:
            - payment.write
        - ApiKeyAuth: []
      tags:
        - 3D Secure
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authenticationRequest'
      responses:
        '201':
          description: Card Lookup operation result response
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authenticationResponse'
        '202':
          description: MPI Authentication operation resulted in a challenge.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authenticationResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '500':
          $ref: '#/components/responses/internalServer'
  /three-d-secure/{authentication-id}:
    parameters:
      - $ref: '#/components/parameters/apiVersion'
      - $ref: '#/components/parameters/correlationId'
      - $ref: '#/components/parameters/prm-common_apiVersion'
      - $ref: '#/components/parameters/xMerchantId'
      - $ref: '#/components/parameters/xStoreId'
      - $ref: '#/components/parameters/xApiToken'
      - $ref: '#/components/parameters/authenticationId'
    get:
      summary: Retrieve Authentication
      description: Retrieve an authentication by its authentication Id
      operationId: getAuthentication
      security:
        - OAuth2:
            - payment.read
        - OAuth2:
            - payment.write
        - ApiKeyAuth: []
      tags:
        - 3D Secure
      responses:
        '200':
          description: The authentication corresponding to the provided `authentication-id`
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authenticationResponse'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '500':
          $ref: '#/components/responses/internalServer'
  /three-d-secure/{authentication-id}/lookup:
    parameters:
      - $ref: '#/components/parameters/apiVersion'
      - $ref: '#/components/parameters/correlationId'
      - $ref: '#/components/parameters/prm-common_apiVersion'
      - $ref: '#/components/parameters/authenticationId'
    post:
      summary: Authentication Value Lookup
      description: The point of the 3-D Secure flow is to verify that the true cardholder is a part of the authorization. The challenge flow is used to present a way of authenticating the cardholder using e.g. OTP or a federated identification method.
      operationId: authenticationValueLookup
      security:
        - OAuth2:
            - payment.write
        - ApiKeyAuth: []
      tags:
        - 3D Secure
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/lookupRequest'
      responses:
        '201':
          description: MPI Authentication operation was successfully authenticated.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authenticationResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '500':
          $ref: '#/components/responses/internalServer'
  /three-d-secure/card-lookups:
    parameters:
      - $ref: '#/components/parameters/apiVersion'
      - $ref: '#/components/parameters/correlationId'
      - $ref: '#/components/parameters/prm-common_apiVersion'
      - $ref: '#/components/parameters/xMerchantId'
      - $ref: '#/components/parameters/xStoreId'
      - $ref: '#/components/parameters/xApiToken'
    post:
      summary: 3DS Card Lookup
      description: 3DS Card Lookup
      operationId: cardLookup
      security:
        - OAuth2:
            - payment.write
        - ApiKeyAuth: []
      tags:
        - 3D Secure
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cardLookupRequest'
      responses:
        '200':
          description: CAVV Lookup operation to read the challenge result.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cardLookupResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '500':
          $ref: '#/components/responses/internalServer'
components:
  headers:
    apiVersion:
      description: Version group id
      required: false
      schema:
        description: Api version group
        type: string
        example: '2023-11-01'
    correlationId:
      description: |
        Used to uniquely correlate a series of requests within the same flow. 
        Generated by Moneris with every request or response if it doesn't exist.
        Merchant should echo back the value.
      required: false
      schema:
        type: string
        example: 06f1e47b-a1b5-4902-be9c-bccc506127c4
    rateLimitCount:
      description: The maximum number of requests that the client can make in this window.
      required: false
      schema:
        type: integer
        format: int64
      example: 1000
    rateLimitRemaining:
      description: The number of requests allowed in the current window.
      required: false
      schema:
        type: integer
        format: int64
      example: 0
    rateLimitReset:
      description: The relative time in seconds when the rate limit window will be reset.
      required: false
      schema:
        type: integer
        format: int32
      example: null
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-Api-Key
    OAuth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://api.moneris.io/token
          scopes:
            payment.read: Grants read access to payment related APIs
            payment.write: Grants read & write access to payment related APIs
            refund.read: Grants read access to refunds
            refund.write: Grants read & write access to refunds
            customer.read: Grants read access to customer data
            customer.write: Grants read & write access to customer data
  parameters:
    apiVersion:
      in: header
      name: Api-Version
      description: Version group id
      required: false
      schema:
        $ref: '#/components/schemas/apiVersion'
    correlationId:
      in: header
      name: X-Correlation-Id
      description: |
        Used to uniquely correlate a series of requests within the same flow.  Generated by Moneris with every request or response if it doesn't exist. Merchant should echo back the value.
      required: false
      schema:
        type: string
        example: 06f1e47b-a1b5-4902-be9c-bccc506127c4
    prm-common_apiVersion:
      in: query
      name: api_version
      description: Version group id
      required: false
      schema:
        $ref: '#/components/schemas/apiVersion'
    xMerchantId:
      in: header
      name: x-merchant-id
      description: |
        Thirteen character long identification provided to merchants by Moneris.  Required when caller is impersonating or submitting a request on behalf of a Merchant.
      required: true
      schema:
        $ref: '#/components/schemas/merchantId'
    xStoreId:
      in: header
      name: x-store-id
      description: Moneris Store Id
      required: true
      schema:
        $ref: '#/components/schemas/storeId'
    xApiToken:
      in: header
      name: x-api-token
      description: Moneris Api Token
      required: true
      schema:
        $ref: '#/components/schemas/apiToken'
    pageBeforeCursor:
      in: query
      name: cursor
      description: Pagination cursor to return rows located after it.
      required: false
      schema:
        type: string
        example: d41d8cd98f00b204e9800998ecf8427e
    pageLimit:
      in: query
      name: limit
      description: Pagination page size limit.
      schema:
        type: integer
        minimum: 1
        maximum: 100
        example: 50
    createdFrom:
      name: created_from
      in: query
      description: Return items created after the specified date. Defaults to start of day.
      required: false
      schema:
        $ref: '#/components/schemas/dateTime'
    createdTo:
      name: created_to
      in: query
      description: Return items created before the specified date. Defaults to now. Must be later than created_from.
      required: false
      schema:
        $ref: '#/components/schemas/dateTime'
    paymentId:
      in: path
      name: payment-id
      description: The unique identifier of the payment
      required: true
      schema:
        $ref: '#/components/schemas/resourceId'
    isExpiring:
      name: is_expiring
      in: query
      description: Returns payment methods that have cards expiring during the current and next calendar month.
      required: false
      schema:
        type: boolean
    paymentMethodId:
      name: payment-method-id
      in: path
      description: Payment Method ID
      required: true
      schema:
        $ref: '#/components/schemas/resourceId'
    refundId:
      in: path
      name: refund-id
      description: The unique identifier of the refund
      required: true
      schema:
        $ref: '#/components/schemas/resourceId'
    validationId:
      in: path
      name: validation-id
      description: The unique identifier of the Validation
      required: true
      schema:
        $ref: '#/components/schemas/resourceId'
    customerId:
      in: path
      name: customer-id
      description: The unique identifier of the customer
      required: true
      schema:
        $ref: '#/components/schemas/resourceId'
    authenticationId:
      in: path
      name: authentication-id
      description: The unique identifier of the authentication
      required: true
      schema:
        $ref: '#/components/schemas/resourceId'
  schemas:
    apiVersion:
      description: Api version group
      type: string
      example: '2023-11-01'
    merchantId:
      type: string
      description: |
        Thirteen character long identification provided to merchants by Moneris.
      minLength: 13
      maxLength: 13
      example: '0123456789101'
    storeId:
      type: string
      description: Account Id provided to merchants by Moneris for processing transactions via API
      minLength: 5
      maxLength: 18
      example: 'monca00001'
    apiToken:
      type: string
      description: 20 alphanumeric characters token provided to merchants by Moneris for processing transactions via API
      minLength: 5
      maxLength: 20
      example: 'eD13Bb6E00249w642a57'
    dateTime:
      type: string
      format: date-time
      example: '2019-07-30T06:43:40.252Z'
    resourceId:
      type: string
      description: A Unique Identifier that is used to identify API resources. This field is required for any future follow-on transactions such as Refunds, Corrections, Completions, Reversals, etc.
      pattern: ^[A-Za-z]{2}\d{2}[A-Za-z0-9]{26}$
      minLength: 30
      maxLength: 30
      example: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
    orderId:
      type: string
      description: Merchant-defined transaction identifier that must be unique for every Purchase, Pre-Authorization and Independent Refund transaction. No two transactions of these types may have the same order ID.
      minLength: 1
      maxLength: 50
      example: 1q2w3e4r5t6t78
    invoiceNumber:
      type: string
      description: The terminal uses the invoice number field to submit a unique value to identify a transaction. This data is logged by Moneris Solutions.
      minLength: 1
      maxLength: 17
      example: 1a2s3d45v6
    transactionDateTime:
      description: Date and Time of transaction
      type: string
      format: date-time
      example: '2019-07-30T06:43:40.252Z'
    createdAt:
      description: Time at which the object was created
      type: string
      format: date-time
      example: '2019-07-30T06:43:40.252Z'
    modifiedAt:
      description: Time at which the object was modified
      type: string
      format: date-time
      example: '2019-07-30T06:43:40.252Z'
    amount:
      type: integer
      format: int32
      minimum: 0
      maximum: 999999999
      example: 10000
    currency:
      type: string
      description: Three letter currency code based on the ISO 4217 standard. See https://en.wikipedia.org/wiki/ISO_4217
      minLength: 3
      maxLength: 4
      example: CAD
    transactionAmount:
      type: object
      description: The amount for the transaction. The value must be in cents. Therefore $10.59 must be sent as 1059
      properties:
        amount:
          $ref: '#/components/schemas/amount'
        currency:
          $ref: '#/components/schemas/currency'
      required:
        - amount
        - currency
      example:
        amount: 16000
        currency: CAD
    subTotalAmount:
      type: object
      description: Sub total amount for the transaction. The value must be in cents. Therefore $10.59 must be sent as 1059
      properties:
        amount:
          $ref: '#/components/schemas/amount'
        currency:
          $ref: '#/components/schemas/currency'
      required:
        - amount
        - currency
      example:
        amount: 2000
        currency: CAD
    tipAmount:
      type: object
      description: Total tip amount for the transaction. The value must be in cents. Therefore $10.59 must be sent as 1059
      properties:
        amount:
          $ref: '#/components/schemas/amount'
        currency:
          $ref: '#/components/schemas/currency'
      required:
        - amount
        - currency
      example:
        amount: 1200
        currency: CAD
    amountDetails:
      description: Additional amount details
      type: object
      properties:
        subTotalAmount:
          $ref: '#/components/schemas/subTotalAmount'
        tipAmount:
          $ref: '#/components/schemas/tipAmount'
    cardholderName:
      type: string
      description: Cardholder name
      minLength: 1
      maxLength: 60
      example: John Doe
    companyName:
      type: string
      description: Company name
      minLength: 1
      maxLength: 50
      example: SP Ltd
    cardholderInformation:
      type: object
      description: Information about the holder of the card.
      properties:
        cardholderName:
          $ref: '#/components/schemas/cardholderName'
        companyName:
          $ref: '#/components/schemas/companyName'
      required:
        - cardholderName
    phoneNumber:
      type: string
      description: Customer's phone number
      minLength: 1
      maxLength: 30
      example: 1-866-319-7450
    email:
      type: string
      format: iso-639
      description: Customer's email address. See https://www.rfc-editor.org/rfc/rfc5322
      minLength: 1
      maxLength: 320
      example: moneris@moneris.com
    contactDetails:
      type: object
      description: Customer's contact details
      properties:
        phoneNumber:
          $ref: '#/components/schemas/phoneNumber'
        email:
          $ref: '#/components/schemas/email'
      example:
        phoneNumber: 1-866-319-7450
        email: moneris@moneris.com
    unitNumber:
      type: string
      description: Unit number
      minLength: 1
      maxLength: 19
      example: 123A
    streetNumber:
      type: string
      description: Street number
      minLength: 1
      maxLength: 19
      example: '3300'
    streetName:
      type: string
      description: Street name
      minLength: 1
      maxLength: 100
      example: Bloor
    city:
      type: string
      description: City
      minLength: 1
      maxLength: 50
      example: Toronto
    province:
      type: string
      description: Province or state
      minLength: 1
      maxLength: 30
      example: Ontario
    postalCode:
      type: string
      description: Postal or zip code
      minLength: 1
      maxLength: 30
      example: M8X 2X2
    country:
      type: string
      description: Two letter country code based on the ISO 3166-1 alpha-2 standard. See https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
      minLength: 2
      maxLength: 2
      example: CA
    address:
      type: object
      description: The postal address including street, town/city, province, and postal code.
      properties:
        unitNumber:
          $ref: '#/components/schemas/unitNumber'
        streetNumber:
          $ref: '#/components/schemas/streetNumber'
        streetName:
          $ref: '#/components/schemas/streetName'
        city:
          $ref: '#/components/schemas/city'
        province:
          $ref: '#/components/schemas/province'
        postalCode:
          $ref: '#/components/schemas/postalCode'
        country:
          $ref: '#/components/schemas/country'
      example:
        unitNumber: 123A
        streetNumber: '3300'
        streetName: Bloor Street West
        city: Toronto
        province: Ontario
        postalCode: M8X 2X2
        country: CA
    paymentMethodType:
      type: string
      description: |
        The type of Payment Method being used. It can be:
          - Permanent Token.
          - Temporary Token.
          - Card.
      enum:
        - PERMANENT_TOKEN
        - TEMPORARY_TOKEN
        - CARD
      example: TEMPORARY_TOKEN
    bankIdentificationNumber:
      type: string
      description: Bank Identification Number (BIN) consists of the first six, up to eight, digits of the primary account number (PAN), and which identifies both the relevant payment network and the specific issuing institution.
      minLength: 6
      maxLength: 8
      example: '123456'
    lastFour:
      type: string
      description: Last 4 digits of the card
      minLength: 4
      maxLength: 4
      example: '1234'
    expiryMonth:
      type: integer
      format: int32
      description: Card expiration month. Format must be MM
      minimum: 1
      maximum: 12
      example: 1
    expiryYear:
      type: integer
      format: int32
      description: Card expiration year. Format must be YYYY
      minimum: 2022
      maximum: 9999
      example: 2023
    cardBrand:
      type: string
      description: Card brand name associated with the cardType.
      enum:
        - MASTERCARD
        - VISA
        - AMERICAN_EXPRESS
        - JCB
        - DINERS_DISCOVER
        - INTERAC
        - UNIONPAY
        - GIFT_MONERIS
        - GIFT_DATACANDY
        - GIFT_GIVEX
      example: MASTERCARD
    cardType:
      type: string
      description: The terminal uses the card type field to specify the intended use for a card (debit or credit)
      enum:
        - CREDIT
        - DEBIT
        - DOMESTIC_DEBIT
        - PREPAID_RELOADABLE
        - PREPAID_NON_RELOADABLE
        - UNKNOWN
        - GIFT
        - LOYALTY
        - FLEET
        - CORPORATE
      example: CREDIT
    cardFingerprint:
      type: string
      description: Unique identifier for the card
      maxLength: 255
      example: 1Q2W3E4r5t6rfwewerwewrrw
    issuer:
      type: string
      description: Card Issuer.
      minLength: 1
      maxLength: 100
      example: RBC
    cardInformation:
      type: object
      description: Information about the card being used for the transaction
      properties:
        bankIdentificationNumber:
          $ref: '#/components/schemas/bankIdentificationNumber'
        lastFour:
          $ref: '#/components/schemas/lastFour'
        expiryMonth:
          $ref: '#/components/schemas/expiryMonth'
        expiryYear:
          $ref: '#/components/schemas/expiryYear'
        cardBrand:
          $ref: '#/components/schemas/cardBrand'
        cardType:
          $ref: '#/components/schemas/cardType'
        cardFingerprint:
          $ref: '#/components/schemas/cardFingerprint'
        issuer:
          $ref: '#/components/schemas/issuer'
    paymentAccountReference:
      type: string
      description: Payment Account Reference (PAR) is used to link Primary Account Number (PAN) based transactions and transactions on associated payment tokens without using the PAN as the linking mechanism.
      minLength: 1
      maxLength: 29
      example: '11112222333344445555666677778'
    paymentMethodInformation:
      title: paymentMethodInformation
      description: Details about the card used in the payment method.
      type: object
      properties:
        cardInformation:
          $ref: '#/components/schemas/cardInformation'
        paymentAccountReference:
          $ref: '#/components/schemas/paymentAccountReference'
      required:
        - cardInformation
    storePaymentMethod:
      description: Store this payment method created through this payment for future use. Store for cardholder or merchant initiated (recurring) transactions.
      type: string
      default: DO_NOT_STORE
      enum:
        - DO_NOT_STORE
        - CARDHOLDER_INITIATED
        - MERCHANT_INITIATED
    customData:
      description: Merchant can send custom meta data with the transaction in this object. Moneris will echo these values back in response.
      type: object
      additionalProperties:
        type: string
        minLength: 1
        maxLength: 50
      maxProperties: 10
    paymentMethodResponse:
      title: paymentMethodResponse
      description: Payment method response object
      type: object
      properties:
        paymentMethodId:
          $ref: '#/components/schemas/resourceId'
        merchantId:
          $ref: '#/components/schemas/merchantId'
        cardholderInformation:
          $ref: '#/components/schemas/cardholderInformation'
        contactDetails:
          $ref: '#/components/schemas/contactDetails'
        billingAddress:
          $ref: '#/components/schemas/address'
        paymentMethodType:
          $ref: '#/components/schemas/paymentMethodType'
        paymentMethodInformation:
          $ref: '#/components/schemas/paymentMethodInformation'
        paymentMethodStored:
          $ref: '#/components/schemas/storePaymentMethod'
        createdAt:
          $ref: '#/components/schemas/createdAt'
        modifiedAt:
          $ref: '#/components/schemas/modifiedAt'
        customData:
          $ref: '#/components/schemas/customData'
    paymentMethodResponseInternal:
      title: Payment Method Response for internal
      type: object
      properties:
        paymentMethodResponse:
          $ref: '#/components/schemas/paymentMethodResponse'
        paymentMethodData:
          $ref: '#/components/schemas/paymentMethodData'
        paymentMethodStatus:
          type: string
          description: Payment Status description.
          enum:
            - ACTIVE
            - EXPIRED
          example: ACTIVE
        storageType:
          type: string
          description: Payment Method Storage Type.
          enum:
            - PERMANENT
            - TEMPORARY
          example: PERMANENT
      required:
        - paymentMethodId
    paymentStatus:
      type: string
      description: Payment Status description.
      enum:
        - CANCELED
        - DECLINED
        - DECLINED_RETRY
        - AUTHORIZED
        - PROCESSING
        - SUCCEEDED
      example: SUCCEEDED
    iso:
      type: string
      description: This field represents the Moneris response code for the equivalent International Organization for Standardization (ISO) response code.
      minLength: 2
      maxLength: 2
      example: 0
    responseCode:
      type: string
      description: Transaction Response Code < 50, Transaction approved >= 50, Transaction declined NULL Transaction was not sent for authorization. For further details on the response codes that are returned please see the Response Codes table
      minLength: 3
      maxLength: 3
      example: 1
    message:
      type: string
      description: Response description returned from issuing institution. This message should not be displayed on any cardholder facing materials.  For receipt purposes, please refer to the Receipt Requirements
      minLength: 1
      maxLength: 100
      example: SUCCESS
    ecommerceIndicator:
      type: string
      description: |
        E-commerce transaction category returned by the issuer.  When returned in the responese, it can be different from the value sent in the request in case transaction was downgraded by the issuer.
      enum:
        - MAIL_TELEPHONE_ORDER_SINGLE
        - MAIL_TELEPHONE_ORDER_RECURRING
        - MAIL_TELEPHONE_ORDER_INSTALMENT
        - MAIL_TELEPHONE_ORDER_UNKNOWN
        - AUTHENTICATED_ECOMMERCE
        - NON_AUTHENTICATED_ECOMMERCE
        - SSL_MERCHANT
      example: AUTHENTICATED_ECOMMERCE
      default: SSL_MERCHANT
    statusDetails:
      type: object
      description: Additional details about the transaction outcome.
      properties:
        transactionUniqueId:
          type: string
          description: Realtime transaction identifier from the host.
        isoResponseCode:
          $ref: '#/components/schemas/iso'
        responseCode:
          $ref: '#/components/schemas/responseCode'
        message:
          $ref: '#/components/schemas/message'
        ecommerceIndicator:
          $ref: '#/components/schemas/ecommerceIndicator'
    addressVerificationServiceResult:
      type: string
      description: >
        Indicates the address verification result. 
        Please refer to the AVS Result Code table for details (https://developer.moneris.com/en/More/Testing/AVS%20Result%20Codes).
        Possible values are:
          - "A"
          - "B"
          - "C"
          - "D"
          - "E"
          - "F"
          - "G"
          - "I"
          - "K"
          - "L"
          - "M"
          - "N"
          - "O"
          - "P"
          - "R"
          - "S"
          - "T"
          - "U"
          - "W"
          - "X"
          - "Y"
          - "Z"
      x-extensible-enum:
        - "A"
        - "B"
        - "C"
        - "D"
        - "E"
        - "F"
        - "G"
        - "I"
        - "K"
        - "L"
        - "M"
        - "N"
        - "O"
        - "P"
        - "R"
        - "S"
        - "T"
        - "U"
        - "W"
        - "X"
        - "Y"
        - "Z"
      example: "A"
    cardSecurityCodeResult:
      type: string
      description: Indicates the CVD validation result. The first byte is the numeric CVD indicator sent in the request; the second byte is the response code. Possible response codes are shown in the CVD Result Code table (https://developer.moneris.com/More/Testing/CVD%20Result%20Codes).
      enum:
        - MATCH
        - NO_MATCH
        - NOT_PROCESSED
        - CVD_NOT_PRESENT
        - NOT_CVD_PARTICIPANT
        - AMEX_JCB_MATCH
        - AMEX_JCB_INVALID
        - OTHER
      example: MATCH
    threeDSecureAuthenticationValueResult:
      type: string
      description: Indicates the Verified by Visa CAVV result. Possible response codes are shown in the CAVV Result Code table (https://developer.moneris.com/More/Testing/CAVV%20Result%20Codes).
      enum:
        - AMEX_AEVV_FAILED_ATTEMPT_ISSUER_KEY
        - AMEX_AEVV_FAILED_ATTEMPT_ISSUER_NOT_PARTICIPATING_NETWORK_KEY
        - AMEX_AEVV_FAILED_ATTEMPT_PARTICIPATING_NOT_AVAILABLE_NETWORK_KEY
        - AMEX_AEVV_FAILED_AUTHENTICATION_ISSUER_KEY
        - AMEX_AEVV_PASSED_ATTEMPT_ISSUER_KEY
        - AMEX_AEVV_PASSED_ATTEMPT_ISSUER_NOT_PARTICIPATING_NETWORK_KEY
        - AMEX_AEVV_PASSED_ATTEMPT_PARTICIPATING_NOT_AVAILABLE_NETWORK_KEY
        - AMEX_AEVV_PASSED_AUTHENTICATION_ISSUER_KEY
        - AMEX_AEVV_UNCHECKED
        - ISA_CAVV_NOT_PRESENT_OR_NOT_VERIFIED
        - MASTERCARD_AUTHENTICATION_ATTEMPTED
        - MASTERCARD_AUTHENTICATION_FAILED
        - MASTERCARD_AUTHENTICATION_SUCCESSFUL
        - VISA_CAVV_AUTHENTICATION_RESULTS_INVALID
        - VISA_CAVV_FAILED_VALIDATION_ATTEMPTED
        - VISA_CAVV_FAILED_VALIDATION_AUTHENTICATION
        - VISA_CAVV_NOT_VALIDATED_ISSUER_NOT_PARTICIPATING
        - VISA_CAVV_PASSED_VALIDATION_ATTEMPTED
        - VISA_CAVV_PASSED_VALIDATION_AUTHENTICATION
        - VISA_CAVV_PASSED_VALIDATION_INFO_ONLY
        - VISA_CAVV_WAS_NOT_VALIDATED_ATTEMPTED
      example: VISA_CAVV_PASSED_VALIDATION_ATTEMPTED
    checkResults:
      description: CVD, AVS, 3DS, ITD Result Codes
      type: object
      properties:
        addressVerificationServiceResultCode:
          $ref: '#/components/schemas/addressVerificationServiceResult'
        cardSecurityCodeResultCode:
          $ref: '#/components/schemas/cardSecurityCodeResult'
        threeDSecureAuthenticationValueResultCode:
          $ref: '#/components/schemas/threeDSecureAuthenticationValueResult'
    originalAmount:
      type: object
      description: Original amount for the transaction. The value must be in cents. Therefore $10.59 must be sent as 1059
      properties:
        amount:
          $ref: '#/components/schemas/amount'
        currency:
          $ref: '#/components/schemas/currency'
      required:
        - amount
        - currency
      example:
        amount: 15000
        currency: CAD
    issuerId:
      type: string
      description: Unique identifier for the cardholder's stored credentials. Sent back in the response from the card brand when processing a Credential on File transaction.
      minLength: 1
      maxLength: 15
      example: A
    cardOnFileResponse:
      type: object
      description: 'Contains fields related to the Credential on File (CoF) '
      properties:
        originalAmount:
          $ref: '#/components/schemas/originalAmount'
        issuerId:
          $ref: '#/components/schemas/issuerId'
    refundAmount:
      type: object
      description: Total refund amount for the transaction. The value must be in cents. Therefore $10.59 must be sent as 1059
      properties:
        amount:
          $ref: '#/components/schemas/amount'
        currency:
          $ref: '#/components/schemas/currency'
      required:
        - amount
        - currency
      example:
        amount: 17500
        currency: CAD
    refundDetails:
      description: Refund details if any has occured.
      type: object
      properties:
        refundIds:
          description: List of Refunds associated with this Payment
          type: array
          items:
            $ref: '#/components/schemas/resourceId'
        refundedAmount:
          $ref: '#/components/schemas/refundAmount'
    paymentResponse:
      title: paymentResponse
      type: object
      properties:
        paymentId:
          $ref: '#/components/schemas/resourceId'
        merchantId:
          $ref: '#/components/schemas/merchantId'
        orderId:
          $ref: '#/components/schemas/orderId'
        invoiceNumber:
          $ref: '#/components/schemas/invoiceNumber'
        transactionDateTime:
          $ref: '#/components/schemas/transactionDateTime'
        createdAt:
          $ref: '#/components/schemas/createdAt'
        modifiedAt:
          $ref: '#/components/schemas/modifiedAt'
        amount:
          description: This amount excludes surcharge, application and convenience fee.
          $ref: '#/components/schemas/transactionAmount'
        authorizedAmount:
          description: This amount includes transactionAmount and all applicable fees (surcharge, application and convenience).
          $ref: '#/components/schemas/transactionAmount'
        capturableAmount:
          $ref: '#/components/schemas/transactionAmount'
        amountDetails:
          $ref: '#/components/schemas/amountDetails'
        customerId:
          $ref: '#/components/schemas/resourceId'
        paymentMethod:
          $ref: '#/components/schemas/paymentMethodResponse'
        paymentStatus:
          $ref: '#/components/schemas/paymentStatus'
        transactionDetails:
          $ref: '#/components/schemas/statusDetails'
        checkResults:
          $ref: '#/components/schemas/checkResults'
        cardOnFileResponse:
          $ref: '#/components/schemas/cardOnFileResponse'
        refunds:
          $ref: '#/components/schemas/refundDetails'
        customData:
          $ref: '#/components/schemas/customData'
    self:
      description: Pagination link pointing to the current page.
      type: string
      format: uri
    first:
      description: Pagination link pointing to the first page.
      type: string
      format: uri
    last:
      description: Pagination link pointing to the last page.
      type: string
      format: uri
    next:
      description: Pagination link pointing to the next page.
      type: string
      format: uri
    previous:
      description: Pagination link pointing to the previous page.
      type: string
      format: uri
    paymentResponseList:
      title: paymentResponseList
      type: object
      properties:
        data:
          description: Payments list.
          type: array
          items:
            type: object
            $ref: '#/components/schemas/paymentResponse'
        self:
          $ref: '#/components/schemas/self'
        first:
          $ref: '#/components/schemas/first'
        last:
          $ref: '#/components/schemas/last'
        next:
          $ref: '#/components/schemas/next'
        previous:
          $ref: '#/components/schemas/previous'
    parameterError:
      title: Parameter error
      description: Request property or header related error.
      type: object
      properties:
        parameterName:
          type: string
          description: Property or header name. Can contain nested path separated by '.'
          example: address.postalCode
        parameterValue:
          type: string
          nullable: true
          description: Property or header value string representation.
          example: MAP3J8
        reasonCode:
          type: string
          description: Reason that triggered the error.
          enum:
            - INVALID_FORMAT
            - REQUIRED_FIELD
            - INVALID_VALUE
          example: INVALID_FORMAT
    error:
      description: Error response details.
      properties:
        type:
          description: |
            A URI reference that identifies the problem type.  Ideally it should be a stable URL to the documentation of the details about this type of error but it also can be a URN.  If nothing can be provided, a "about:blank" value is returned.
          type: string
          format: uri
          example: https://developer.moneris.com/docs/error-codes
        title:
          description: |
            A short, human-readable summary of the problem type.   It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization
          type: string
          example: INSUFFICIENT_FUNDS
          nullable: true
        status:
          description: |
            it conveys the HTTP status code used for the convenience of the consumer.
          type: integer
          format: int32
          minimum: 100
          maximum: 505
          nullable: true
        detail:
          description: |
            A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.
          type: string
          example: Funds are insufficient to execute the operation.
          nullable: true
        instance:
          description: |
            A URI reference that identifies the specific occurrence of the problem. Typically, this resolves to a resource that might include more details about the problem.
          type: string
          example: /payments/12f3e0a8-1d68-2b86-dd30-4ca51bb66e10
          format: uri
          nullable: true
        category:
          description: |
            The type of error returned. 
             - `API_ERROR`: This occurs due to an intermittent issue.  
             - `IDEMPOTENCY_ERROR`: The idempotency key has already been used.
             - `INVALID_REQUEST_ERROR`: The data provided in the request is invalid.
             - `DECLINED_ERROR`: Transaction was declined by the issuer.
             - `UNAUTHORIZED_ERROR`: Caller not authenticated, or not allowed to execute the current operation.
             - `INTERNAL_SERVER_ERROR`: An internal issue with our servers has occured.
          enum:
            - API_ERROR
            - IDEMPOTENCY_ERROR
            - INVALID_REQUEST_ERROR
            - DECLINED_ERROR
            - UNAUTHORIZED_ERROR
            - INTERNAL_SERVER_ERROR
          type: string
          example: DECLINED_ERROR
        errors:
          type: array
          description: List of validation errors when error category is INVALID_REQUEST_ERROR.
          items:
            type: object
            $ref: '#/components/schemas/parameterError'
          example:
            - parameter: address.postalCode
              value: MAP3J8
              reasonCode: invalid_format
      title: API Error
      type: object
    idempotencyKey:
      type: string
      description: A Unique Identifier that is used handle idempotent requests. Moneris encourages the use of UUID Version 4 in APIs as an idempotency key.
      minLength: 1
      maxLength: 36
      example: 6q5w4e7r8t9y
    cardNumber:
      type: string
      description: Customer's credit / debit card number (Primary Account Number).
      minLength: 14
      maxLength: 16
      example: '4444111122223333'
    cardSecurityCode:
      type: integer
      format: int32
      description: CVD value located on credit card. The CVD value (supplied by the cardholder) must only be passed to the payment gateway. Under no circumstances may it be stored for subsequent use or displayed as part of the receipt information.
      minimum: 0
      maximum: 9999
      example: 123
    paymentMethodCard:
      type: object
      description: Credit/Debit/Gift Card payment method details.
      properties:
        cardNumber:
          $ref: '#/components/schemas/cardNumber'
        expiryMonth:
          $ref: '#/components/schemas/expiryMonth'
        expiryYear:
          $ref: '#/components/schemas/expiryYear'
        cardSecurityCode:
          $ref: '#/components/schemas/cardSecurityCode'
      required:
        - cardNumber
        - expiryMonth
        - expiryYear
        - cardSecurityCode
    token:
      type: string
      description: This field is created when a temporary token is created and returned. It is a unique profile identifier, and is a required value for temporary token transactions.
      minLength: 25
      maxLength: 28
      example: ot-HCUeCFtXJfEZSSUqvUJk0
    paymentMethodData:
      title: paymentMethodData
      type: object
      description: Payment method details
      properties:
        paymentMethodType:
          $ref: '#/components/schemas/paymentMethodType'
        card:
          $ref: '#/components/schemas/paymentMethodCard'
        temporaryToken:
          $ref: '#/components/schemas/token'
        permanentToken:
          $ref: '#/components/schemas/token'
      required:
        - paymentMethodType
    paymentMethodRequest:
      title: paymentMethodRequest
      type: object
      properties:
        cardholderInformation:
          $ref: '#/components/schemas/cardholderInformation'
        contactDetails:
          $ref: '#/components/schemas/contactDetails'
        billingAddress:
          $ref: '#/components/schemas/address'
        paymentMethodData:
          $ref: '#/components/schemas/paymentMethodData'
        customData:
          $ref: '#/components/schemas/customData'
      required:
        - paymentMethodData
    paymentMethodRequestInternal:
      type: object
      description: Internal Payment Method Request
      properties:
        readOnly:
          type: boolean
          description: Change temp token status to read only
        convertToPermanentToken:
          type: boolean
          description: To convert temp token to permanent token
        issuerId:
          type: string
          description: Issuer ID
        expiryMonth:
          $ref: '#/components/schemas/expiryMonth'
        expiryYear:
          $ref: '#/components/schemas/expiryYear'
        paymentMethodStored:
          $ref: '#/components/schemas/storePaymentMethod'
    automaticCapture:
      type: boolean
      description: This flag is used to overide the default payment transaction type enabled on the Merchant profile. Yes (Default) will cause Moneris to capture the payment when it is authorized. No will cause Moneris to place a hold on the funds when the payment is authorized.
      default: true
    dynamicDescriptor:
      type: string
      description: Merchant defined description sent on a per-transaction basis that will appear on the credit card statement.  Dependent on the card Issuer, the statement will typically show the dynamic descriptor appended to the merchant's existing business name separated by the '/' character.  Please note that the combined length of the merchant's business name, forward slash '/' character, and the dynamic descriptor may not exceed 22 characters.
      minLength: 1
      maxLength: 20
      example: moneris
    threeDSecureAuthenticationValue:
      type: string
      description: The Cardholder Authentication Verification Value (CAVV), the Accountholder Authentication Value (AAV), and the American Express Verification Value (AEVV), are the values that allows Visa, Mastercard and American Express to validate the integrity of the Visa Secure, Mastercard Identity Check and American Express SafeKey transaction data. These values are passed back from the issuer to the merchant after the authentication has taken place. The merchant then integrates the CAVV/AAV/AEVV value into the authorization request using the Purchase or Pre-Authorization with 3-D Secure transaction type.
      maxLength: 50
      example: '00000109260000719349'
    threeDSecureVersion:
      type: string
      description: Required if sending a 3-D Secure version 2.0+ transaction. Default to V2.1 if no value is provided.
      maxLength: 10
      example: '2.2'
    threeDSecureServerTransactionId:
      type: string
      description: "Required if sending a version 3-D Secure 2.0+ transaction. Data is obtained from a Cavv Lookup Request or MPI\_3DS\_Authentication Request transaction"
      maxLength: 36
      format: uuid
      example: ad9b0eda-bf9b-4288-b188-9467993603e1
    threeDSecureDirectoryServerTransactionId:
      type: string
      description: Universally unique transaction identifier assigned by the 3DS Directory Server (DS) to identify a single transaction.
      maxLength: 36
      format: uuid
      example: ad9b0eda-bf9b-4288-b188-9467993603e1
    threeDSecureData:
      description: Data related to 3-D Secure
      type: object
      properties:
        threeDSecureAuthenticationValue:
          $ref: '#/components/schemas/threeDSecureAuthenticationValue'
        threeDSecureVersion:
          $ref: '#/components/schemas/threeDSecureVersion'
        threeDSecureServerTransactionId:
          $ref: '#/components/schemas/threeDSecureServerTransactionId'
        threeDSecureDirectoryServerTransactionId:
          $ref: '#/components/schemas/threeDSecureDirectoryServerTransactionId'
    paymentIndicator:
      type: string
      description: Indicates the current or intended use of the credentials
      enum:
        - UNSCHEDULED_COF
        - RECURRING
        - MERCHANT_INITIATED
        - VARIABLE_RECURRING
        - CUSTOMER_INITIATED
      example: UNSCHEDULED_COF
    paymentInformation:
      type: string
      description: Describes whether the transaction is the first or subsequent in the series
      enum:
        - FIRST
        - SUBSEQUENT
      example: FIRST
    cardOnFileInformation:
      type: object
      description: 'Contains fields related to the Credential on File (CoF) '
      properties:
        paymentIndicator:
          $ref: '#/components/schemas/paymentIndicator'
        paymentInformation:
          $ref: '#/components/schemas/paymentInformation'
        issuerId:
          $ref: '#/components/schemas/issuerId'
        originalAmount:
          $ref: '#/components/schemas/originalAmount'
      required:
        - paymentIndicator
        - paymentInformation
        - issuerId
      example:
        paymentIndicator: CUSTOMER_INITIATED
        paymentInformation: FIRST
        issuerId: 123asd
    ipv4:
      type: string
      format: ipv4
      description: Internet Protocol version 4 (IPv4).
      example: 104.75.173.179
    ipv6:
      type: string
      format: ipv6
      description: Internet Protocol version 6 (IPv6).
      example: 2600:1401:2::8a
    createPaymentRequest:
      title: paymentRequest
      type: object
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/idempotencyKey'
        orderId:
          $ref: '#/components/schemas/orderId'
        invoiceNumber:
          $ref: '#/components/schemas/invoiceNumber'
        amount:
          description: This amount excludes surcharge, application and converience fee.
          $ref: '#/components/schemas/transactionAmount'
        amountDetails:
          $ref: '#/components/schemas/amountDetails'
        customerId:
          $ref: '#/components/schemas/resourceId'
        paymentMethodId:
          $ref: '#/components/schemas/resourceId'
        paymentMethod:
          $ref: '#/components/schemas/paymentMethodRequest'
        storePaymentMethod:
          $ref: '#/components/schemas/storePaymentMethod'
        ecommerceIndicator:
          description: Describes the category of e-commerce transaction being processed.
          $ref: '#/components/schemas/ecommerceIndicator'
        automaticCapture:
          $ref: '#/components/schemas/automaticCapture'
        customData:
          $ref: '#/components/schemas/customData'
        dynamicDescriptor:
          $ref: '#/components/schemas/dynamicDescriptor'
        threeDSecureAuthenticationId:
          $ref: '#/components/schemas/resourceId'
        threeDSecureData:
          $ref: '#/components/schemas/threeDSecureData'
        cardOnFileInformation:
          $ref: '#/components/schemas/cardOnFileInformation'
        ipv4:
          $ref: '#/components/schemas/ipv4'
        ipv6:
          $ref: '#/components/schemas/ipv6'
      required:
        - idempotencyKey
        - merchantId
        - amount
    reason:
      type: string
      description: Reason for the refund.
      minLength: 1
      maxLength: 100
      example: Defective product
    cancelPaymentRequest:
      title: cancelPaymentRequest
      type: object
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/idempotencyKey'
        customData:
          $ref: '#/components/schemas/customData'
        reason:
          $ref: '#/components/schemas/reason'
      required:
        - idempotencyKey
        - merchantId
    completionRequest:
      title: completionRequest
      type: object
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/idempotencyKey'
        invoiceNumber:
          $ref: '#/components/schemas/invoiceNumber'
        customData:
          $ref: '#/components/schemas/customData'
        amount:
          description: Amount for the transaction
          $ref: '#/components/schemas/transactionAmount'
      required:
        - idempotencyKey
        - merchantId
    paymentMethodResponseList:
      description: List of Payment Methods
      type: object
      title: paymentMethodResponseList
      properties:
        data:
          description: Payment Method list
          type: array
          items:
            type: object
            $ref: '#/components/schemas/paymentMethodResponse'
        self:
          $ref: '#/components/schemas/self'
        first:
          $ref: '#/components/schemas/first'
        last:
          $ref: '#/components/schemas/last'
        next:
          $ref: '#/components/schemas/next'
        previous:
          $ref: '#/components/schemas/previous'
    createPaymentMethodRequest:
      title: paymentMethodRequest
      type: object
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/idempotencyKey'
        cardholderInformation:
          $ref: '#/components/schemas/cardholderInformation'
        contactDetails:
          $ref: '#/components/schemas/contactDetails'
        billingAddress:
          $ref: '#/components/schemas/address'
        paymentMethodData:
          $ref: '#/components/schemas/paymentMethodData'
        customData:
          $ref: '#/components/schemas/customData'
      required:
        - idempotencyKey
        - paymentMethodData
    updatePaymentMethodRequest:
      title: paymentMethodRequest
      type: object
      properties:
        cardholderInformation:
          $ref: '#/components/schemas/cardholderInformation'
        contactDetails:
          $ref: '#/components/schemas/contactDetails'
        billingAddress:
          $ref: '#/components/schemas/address'
        paymentMethodData:
          $ref: '#/components/schemas/paymentMethodData'
        customData:
          $ref: '#/components/schemas/customData'
      required:
        - paymentMethodData
    refundStatus:
      type: string
      description: Refund Status description.
      enum:
        - DECLINED
        - DECLINED_RETRY
        - PROCESSING
        - SUCCEEDED
      example: SUCCEEDED
    refundResponse:
      title: refundResponse
      type: object
      properties:
        refundId:
          $ref: '#/components/schemas/resourceId'
        paymentId:
          $ref: '#/components/schemas/resourceId'
        merchantId:
          $ref: '#/components/schemas/merchantId'
        paymentMethod:
          $ref: '#/components/schemas/paymentMethodResponse'
        createdAt:
          $ref: '#/components/schemas/createdAt'
        modifiedAt:
          $ref: '#/components/schemas/modifiedAt'
        refundAmount:
          $ref: '#/components/schemas/refundAmount'
        customerId:
          $ref: '#/components/schemas/resourceId'
        status:
          $ref: '#/components/schemas/refundStatus'
        statusDetails:
          $ref: '#/components/schemas/statusDetails'
        reason:
          $ref: '#/components/schemas/reason'
        cardOnFileResponse:
          $ref: '#/components/schemas/cardOnFileResponse'
        customData:
          $ref: '#/components/schemas/customData'
    refundResponseList:
      title: refundResponseList
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/refundResponse'
        self:
          $ref: '#/components/schemas/self'
        first:
          $ref: '#/components/schemas/first'
        last:
          $ref: '#/components/schemas/last'
        next:
          $ref: '#/components/schemas/next'
        previous:
          $ref: '#/components/schemas/previous'
    createRefundRequest:
      title: refundRequest
      type: object
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/idempotencyKey'
        paymentId:
          $ref: '#/components/schemas/resourceId'
        orderId:
          $ref: '#/components/schemas/orderId'
        invoiceNumber:
          $ref: '#/components/schemas/invoiceNumber'
        refundAmount:
          $ref: '#/components/schemas/refundAmount'
        paymentMethodId:
          $ref: '#/components/schemas/resourceId'
        paymentMethod:
          $ref: '#/components/schemas/paymentMethodRequest'
        customerId:
          $ref: '#/components/schemas/resourceId'
        customData:
          $ref: '#/components/schemas/customData'
        dynamicDescriptor:
          $ref: '#/components/schemas/dynamicDescriptor'
        cofInformation:
          $ref: '#/components/schemas/cardOnFileInformation'
        ipv4:
          $ref: '#/components/schemas/ipv4'
        ipv6:
          $ref: '#/components/schemas/ipv6'
        ecommerceIndicator:
          description: Describes the category of e-commerce transaction being processed.
          $ref: '#/components/schemas/ecommerceIndicator'
        reason:
          $ref: '#/components/schemas/reason'
      required:
        - idempotencyKey
        - merchantId

        - refundAmount
        - paymentId
    validationStatus:
      type: string
      description: Validation Status description.
      enum:
        - CANCELED
        - DECLINED
        - DECLINED_RETRY
        - PROCESSING
        - SUCCEEDED
      example: SUCCEEDED
    validationResponse:
      title: createValidationResponse
      type: object
      properties:
        validationId:
          $ref: '#/components/schemas/resourceId'
        merchantId:
          $ref: '#/components/schemas/merchantId'
        createdAt:
          $ref: '#/components/schemas/createdAt'
        modifiedAt:
          $ref: '#/components/schemas/modifiedAt'
        paymentMethod:
          $ref: '#/components/schemas/paymentMethodResponse'
        validationStatus:
          $ref: '#/components/schemas/validationStatus'
        transactionDetails:
          $ref: '#/components/schemas/statusDetails'
        checkResults:
          $ref: '#/components/schemas/checkResults'
        cardOnFileResponse:
          $ref: '#/components/schemas/cardOnFileResponse'
        customerId:
          $ref: '#/components/schemas/resourceId'
        customData:
          $ref: '#/components/schemas/customData'
    validationsResponseList:
      title: validationsResponseList
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/validationResponse'
        self:
          $ref: '#/components/schemas/self'
        first:
          $ref: '#/components/schemas/first'
        last:
          $ref: '#/components/schemas/last'
        next:
          $ref: '#/components/schemas/next'
        previous:
          $ref: '#/components/schemas/previous'
    createValidationRequest:
      title: Creates a Validation Request
      type: object
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/idempotencyKey'
        paymentMethodId:
          $ref: '#/components/schemas/resourceId'
        paymentMethod:
          $ref: '#/components/schemas/paymentMethodRequest'
        storePaymentMethod:
          $ref: '#/components/schemas/storePaymentMethod'
        customerId:
          $ref: '#/components/schemas/resourceId'
        cardOnFileInformation:
          $ref: '#/components/schemas/cardOnFileInformation'
        dynamicDescriptor:
          $ref: '#/components/schemas/dynamicDescriptor'
        threeDSecureAuthenticationId:
          $ref: '#/components/schemas/resourceId'
        threeDSecureData:
          $ref: '#/components/schemas/threeDSecureData'
        ecommerceIndicator:
          description: Describes the category of e-commerce transaction being processed.
          $ref: '#/components/schemas/ecommerceIndicator'
        customData:
          $ref: '#/components/schemas/customData'
      required:
        - idempotencyKey
        - merchantId
    firstName:
      type: string
      description: Customer first name
      minLength: 1
      maxLength: 30
      example: John
    middleName:
      type: string
      description: Customer middle name
      minLength: 1
      maxLength: 30
      example: J.
    lastName:
      type: string
      description: Customer last name
      minLength: 1
      maxLength: 30
      example: Doe
    customerResponse:
      title: customerResponse
      type: object
      properties:
        merchantId:
          $ref: '#/components/schemas/merchantId'
        customerId:
          $ref: '#/components/schemas/resourceId'
        createdAt:
          $ref: '#/components/schemas/createdAt'
        modifiedAt:
          $ref: '#/components/schemas/modifiedAt'
        firstName:
          $ref: '#/components/schemas/firstName'
        middleName:
          $ref: '#/components/schemas/middleName'
        lastName:
          $ref: '#/components/schemas/lastName'
        companyName:
          $ref: '#/components/schemas/companyName'
        address:
          $ref: '#/components/schemas/address'
        shippingAddress:
          $ref: '#/components/schemas/address'
        phoneNumber:
          $ref: '#/components/schemas/phoneNumber'
        email:
          $ref: '#/components/schemas/email'
        customData:
          $ref: '#/components/schemas/customData'
    customerResponseList:
      title: customerResponseList
      properties:
        data:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/customerResponse'
        self:
          $ref: '#/components/schemas/self'
        first:
          $ref: '#/components/schemas/first'
        last:
          $ref: '#/components/schemas/last'
        next:
          $ref: '#/components/schemas/next'
        previous:
          $ref: '#/components/schemas/previous'
    createCustomerRequest:
      title: customerRequest
      type: object
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/idempotencyKey'
        firstName:
          $ref: '#/components/schemas/firstName'
        middleName:
          $ref: '#/components/schemas/middleName'
        lastName:
          $ref: '#/components/schemas/lastName'
        companyName:
          $ref: '#/components/schemas/companyName'
        address:
          $ref: '#/components/schemas/address'
        shippingAddress:
          $ref: '#/components/schemas/address'
        phoneNumber:
          $ref: '#/components/schemas/phoneNumber'
        email:
          $ref: '#/components/schemas/email'
        customData:
          $ref: '#/components/schemas/customData'
      required:
        - idempotencyKey
        - merchant
    customerRequest:
      title: customerRequest
      type: object
      properties:
        firstName:
          $ref: '#/components/schemas/firstName'
        middleName:
          $ref: '#/components/schemas/middleName'
        lastName:
          $ref: '#/components/schemas/lastName'
        companyName:
          $ref: '#/components/schemas/companyName'
        address:
          $ref: '#/components/schemas/address'
        shippingAddress:
          $ref: '#/components/schemas/address'
        phoneNumber:
          $ref: '#/components/schemas/phoneNumber'
        email:
          $ref: '#/components/schemas/email'
        customData:
          $ref: '#/components/schemas/customData'
    threeDSecureMessageCategory:
      type: string
      description: Identifies the category of the message for a specific use case.
      enum:
        - PAYMENT
        - NON_PAYMENT
      example: PAYMENT
    threeDSecureDeviceChannel:
      type: string
      description: Indicates the type of channel interface being used to initiate the transaction.
      enum:
        - BROWSER
        - THREE_D_SECURE_REQUESTOR_INITIATED
      example: BROWSER
    threeDSecureRequestType:
      type: string
      description: |
        Type of payment that triggered the verification.
          - **CARDHOLDER**: Cardholder initiated payment.
          - **RECURRING**: Recurring payment.
      enum:
        - CARDHOLDER
        - RECURRING
      example: CARDHOLDER
    threeDSecureRecurringFrequency:
      type: integer
      format: int32
      description: Indicates the minimum number of days between authorisations.
      minimum: 1
      maximum: 9999
      example: 1
    threeDSecureRecurringExpiry:
      type: string
      description: Date after which no further authorisations shall be performed. This is a required field for recurring transactions, we suggest setting it at a reasonably high value if you don't have a defined expiry date.
      format: date
      minLength: 10
      maxLength: 10
      example: '2019-07-30'
    threeDSecureRequestorInitiatedIndicator:
      type: string
      description: Indicates the type of 3RI request. This data element provides additional information to the ACS to determine the best approach for handing a 3RI request.
      enum:
        - RECURRING_TRANSACTION
        - INSTALMENT_TRANSACTION
        - ADD_CARD
        - MAINTAIN_CARD_INFORMATION
        - ACCOUNT_VERIFICATION
        - SPLIT_DELAYED_SHIPMENT
        - TOP_UP
        - MAIL_ORDER
        - TELEPHONE_ORDER
        - WHITELIST_STATUS_CHECK
        - OTHER_PAYMENT
      example: RECURRING_TRANSACTION
    threeDSecurePriorAuthenticationData:
      type: string
      description: Data that documents and supports a specific authentication process. In the current version of the specification this data element is not defined in detail, however the intention is that for each 3DS Requestor Authentication Method, this field carry data that the ACS can use to verify the authentication process. In future versions of the specification, these details are expected to be included.
      maxLength: 2048
      example: '12345678'
    threeDSecurePriorAuthenticationMethod:
      type: string
      description: Mechanism used by the Cardholder to previously authenticate to the 3DS Requestor.
      enum:
        - FRICTIONLESS_AUTHENTICATION_OCCURRED_BY_ACS
        - CARDHOLDER_CHALLENGE_OCCURRED_BY_ACS
        - AVS_VERIFIED
        - OTHER_ISSUER_METHODS
      example: AVS_VERIFIED
    threeDSecurePriorAuthenticationTimestamp:
      type: string
      description: Date and time in UTC of the prior cardholder authentication.
      format: date-time
      example: '2019-07-30T06:43:40.252Z'
    threeDSecurePriorAuthenticationReference:
      type: string
      description: This data element provides additional information to the ACS to determine the best approach for handing a request.
      maxLength: 36
      example: '12345678'
    threeDSecurePriorAuthenticationInformation:
      type: object
      description: Information about how the 3DS Requestor authenticated the cardholder as part of a previous 3DS transaction.
      properties:
        threeDSecurePriorAuthenticationData:
          $ref: '#/components/schemas/threeDSecurePriorAuthenticationData'
        threeDSecurePriorAuthenticationMethod:
          $ref: '#/components/schemas/threeDSecurePriorAuthenticationMethod'
        threeDSecurePriorAuthenticationTimestamp:
          $ref: '#/components/schemas/threeDSecurePriorAuthenticationTimestamp'
        threeDSecurePriorAuthenticationReference:
          $ref: '#/components/schemas/threeDSecurePriorAuthenticationReference'
    threeDSecureNotificationUrl:
      type: string
      format: uri
      description: Fully qualified URL of the system that receives the Response message or Error Message.
      example: https://developer.moneris.com/
    threeDSecureCompletionIndicator:
      type: string
      description: |
        Indicates whether 3DS Card Lookup was successfully completed.  A successful Card Lookup increases the chances of a frictionless card authentication.
          - **SUCCESS**: Successfully completed.
          - **FAILURE**: 3DS Card Lookup attempted, but failed.
          - **UNAVAILABLE**: Unavailable or not attempted.
      enum:
        - SUCCESS
        - FAILURE
        - UNAVAILABLE
      example: SUCCESS
    threeDSecureChallengeRequested:
      type: string
      description: Indicates whether a browser-based challenge is requested for this transaction. Standard is 'No Preference'
      enum:
        - NO_PREFERENCE
        - NO_CHALLENGE_REQUESTED
        - CHALLENGE_REQUESTED_THREE_D_SECURE_REQUESTOR_PREFERENCE
        - CHALLENGE_REQUESTED_MANDATE
      example: NO_PREFERENCE
    threeDSecureChallengeWindowSize:
      type: string
      description: |
        Dimensions of the challenge window that has been displayed to the Cardholder in the browser.
          - **X_SMALL**: 250 x 400
          - **SMALL**: 390 x 400
          - **MEDIUM**: 500 x 600
          - **LARGE**: 600 x 400
          - **FULL_SCREEN**: Full Screen
      enum:
        - X_SMALL
        - SMALL
        - MEDIUM
        - LARGE
        - FULL_SCREEN
      example: FULL_SCREEN
    browserUserAgent:
      type: string
      description: Exact content of the HTTP user-agent header. Note, If the total length of the User-Agent sent by the browser exceeds 2048 characters, truncate the excess portion.
      maxLength: 2048
      example: Mozilla/5.0 (Linux; {Android Version}; {Build Tag etc.})
    browserJavaEnabled:
      type: boolean
      description: Indicates whether Java is enabled in the browser
      example: 'true'
    browserJavascriptEnabled:
      type: boolean
      description: Indicates whether Javascript is enabled in the browser
      example: 'true'
    browserScreenHeight:
      type: integer
      format: int32
      description: Total height of the Cardholder’s screen in pixels.
      minimum: 0
      maximum: 999999
      example: 1080
    browserScreenWidth:
      type: integer
      format: int32
      description: Total width of the cardholder’s screen in pixels.
      minimum: 0
      maximum: 999999
      example: 1920
    language:
      type: string
      format: iso-639
      description: Two letter language code based on the ISO 639-1 standard. See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes
      minLength: 2
      maxLength: 2
      example: en
    authenticationRequest:
      title: authenticationRequest
      description: Use the 3DS Authentication request to start the validation process of the card and cardholder identity. This request supports all 3DS authentication methods, including 3DS Requestor Initiated (3RI) and Decoupled Authentication. The fields device_channel and message_category control the type of 3DS request made. To perform a standard 3DS Authentication with a cardholder browser experience, send device_channel = 02 for BRW. The result of this request determines whether the card supports 3DS features and, if supported, whether the transaction uses a frictionless or challenge flow. To perform a 3DS Requestor Initiated Authentication without a cardholder browser experience, send device_channel = 03 for 3RI. Any fields related to the browser’s challenge prompt are no longer required, but other conditional fields for 3RI become mandatory.
      type: object
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/idempotencyKey'
        cardLookupId:
          $ref: '#/components/schemas/resourceId'
        orderId:
          $ref: '#/components/schemas/orderId'
        amount:
          $ref: '#/components/schemas/transactionAmount'
        cardholderName:
          $ref: '#/components/schemas/cardholderName'
        cardholderEmail:
          $ref: '#/components/schemas/email'
        cardholderPhoneNumber:
          $ref: '#/components/schemas/phoneNumber'
        shippingAddress:
          $ref: '#/components/schemas/address'
        billingAddress:
          $ref: '#/components/schemas/address'
        paymentMethodId:
          $ref: '#/components/schemas/resourceId'
        paymentMethod:
          $ref: '#/components/schemas/paymentMethodRequest'
        threeDSecureMessageCategory:
          $ref: '#/components/schemas/threeDSecureMessageCategory'
        threeDSecureDeviceChannel:
          $ref: '#/components/schemas/threeDSecureDeviceChannel'
        threeDSecureRequestType:
          $ref: '#/components/schemas/threeDSecureRequestType'
        threeDSecureRecurringFrequency:
          $ref: '#/components/schemas/threeDSecureRecurringFrequency'
        threeDSecureRecurringExpiry:
          $ref: '#/components/schemas/threeDSecureRecurringExpiry'
        threeDSecureRequestorInitiatedIndicator:
          $ref: '#/components/schemas/threeDSecureRequestorInitiatedIndicator'
        threeDSecurePriorAuthenticationInformation:
          $ref: '#/components/schemas/threeDSecurePriorAuthenticationInformation'
        threeDSecureNotificationUrl:
          $ref: '#/components/schemas/threeDSecureNotificationUrl'
        threeDSecureCompletionIndicator:
          $ref: '#/components/schemas/threeDSecureCompletionIndicator'
        threeDSecureChallengeRequested:
          $ref: '#/components/schemas/threeDSecureChallengeRequested'
        threeDSecureChallengeWindowSize:
          $ref: '#/components/schemas/threeDSecureChallengeWindowSize'
        browserIpAddress:
          $ref: '#/components/schemas/ipv4'
        browserUserAgent:
          $ref: '#/components/schemas/browserUserAgent'
        browserJavaEnabled:
          $ref: '#/components/schemas/browserJavaEnabled'
        browserJavascriptEnabled:
          $ref: '#/components/schemas/browserJavascriptEnabled'
        browserScreenHeight:
          $ref: '#/components/schemas/browserScreenHeight'
        browserScreenWidth:
          $ref: '#/components/schemas/browserScreenWidth'
        browserLanguage:
          $ref: '#/components/schemas/language'
      required:

        - merchantId

        - amount
        - billingAddress
        - browserIpAddress
        - browserScreenHeight
        - browserScreenWidth
        - cardholderEmail
        - cardholderName
        - cardholderPhoneNumber
        - idempotencyKey
        - orderId
        - threeDSecureDeviceChannel
        - threeDSecureMessageCategory
    threeDSecureMessageType:
      type: string
      description: Indicates response type in 3DS flow
      enum:
        - AUTHENTICATION_RESPONSE_MESSAGE
        - AUTHENTICATION_REQUEST_MESSAGE
        - PREPARATION_RESPONSE_MESSAGE
        - PREPARATION_REQUEST_MESSAGE
        - CHALLENGE_RESPONSE_MESSAGE
        - CHALLENGE_REQUEST_MESSAGE
        - RESULTS_REQUEST_MESSAGE
        - RESULTS_RESPONSE_MESSAGE
        - ERROR_MESSAGE
      example: CHALLENGE_RESPONSE_MESSAGE
    threeDSecureTransactionStatus:
      type: string
      description: |
        Indicates the Transaction result.  For more information about this field, please review https://docs.3dsecure.io/3dsv2/specification_220.html#attr-ARes-transStatus
          - **AUTHENTICATED**: Authentication/ Account Verification Successful.
          - **AUTHENTICATION_ATTEMPTED**: Attempts Processing Performed; Not Authenticated/Verified , but a proof of attempted authentication/verification is provided.
          - **CHALLENGE_AUTHENTICATION_REQUIRED**: Challenge Required; Additional authentication is required using the `challengeUrl` and `challengeData`.
          - **CHALLENGE_DECOUPLED_AUTHENTICATION_CONFIRMED**: Challenge Required; Decoupled Authentication confirmed. 
          - **TECHNICAL_ISSUE**: Authentication/ Account Verification Could Not Be Performed; Technical or other problem.
          - **NOT_AUTHENTICATED**: Not Authenticated /Account Not Verified; Transaction denied.
          - **REJECTED**: Authentication/ Account Verification Rejected; Issuer is rejecting authentication/verification and request that authorisation not be attempted.
          - **CHALLENGE_PREFERENCE_ACKNOWLEDGED**: Informational Only; 3DS Requestor challenge preference acknowledged.
      enum:
        - AUTHENTICATED
        - AUTHENTICATION_ATTEMPTED
        - CHALLENGE_AUTHENTICATION_REQUIRED
        - CHALLENGE_DECOUPLED_AUTHENTICATION_CONFIRMED
        - TECHNICAL_ISSUE
        - NOT_AUTHENTICATED
        - REJECTED
        - CHALLENGE_PREFERENCE_ACKNOWLEDGED
    threeDSecureTransactionStatusReason:
      type: object
      description: Provides information on why the Transaction Status field has the specified value.
      properties:
        threeDSecureTransactionStatusReasonCode:
          $ref: '#/components/schemas/threeDSecurePriorAuthenticationData'
        threeDSecureTransactionStatusReasonDescription:
          $ref: '#/components/schemas/threeDSecurePriorAuthenticationMethod'
    threeDSecureChallengeUrl:
      type: string
      description: If the transStatus is “C” this field will be populated with the URL to POST the challengeData to create the cardholder challenge screen
      format: uri
      minLength: 1
      maxLength: 2048
      example: https://developer.moneris.com/
    threeDSecureChallengeData:
      type: string
      description: String that must be POSTed to the Challenge URL to create challenge screen
      minLength: 1
      maxLength: 2048
    threeDSecureChallengeCompletionIndicator:
      type: string
      description: Indicator of the state of the ACS challenge cycle and whether the challenge has completed or will require additional messages.
      enum:
        - 'YES'
        - 'NO'
    threeDSecureAccessControlServerTransactionId:
      type: string
      description: "Required if sending a version 3-D Secure 2.0+ transaction. Data is obtained from a Cavv Lookup Request or MPI\_3DS\_Authentication Request transaction"
      maxLength: 36
      format: uuid
      example: ad9b0eda-bf9b-4288-b188-9467993603e1
    threeDSecureAuthenticationType:
      type: string
      description: Indicates the type of authentication method the Issuer will use to challenge the Cardholder, whether in the ARes message or what was used by the ACS when in the RReq message.
      enum:
        - STATIC
        - DYNAMIC
        - OOB
        - DECOUPLED
      example: DYNAMIC
    threeDSecureAuthenticationTimestamp:
      type: string
      description: Date and time in UTC of the cardholder authentication.
      format: date-time
      example: '2019-07-30T06:43:40.252Z'
    authenticationResponse:
      title: authenticationResponse
      type: object
      properties:
        threeDSecureAuthenticationId:
          $ref: '#/components/schemas/resourceId'
        cardLookupId:
          $ref: '#/components/schemas/resourceId'
        merchantId:
          $ref: '#/components/schemas/merchantId'
        orderId:
          $ref: '#/components/schemas/orderId'
        threeDSecureMessageType:
          $ref: '#/components/schemas/threeDSecureMessageType'
        threeDSecureTansactionStatus:
          $ref: '#/components/schemas/threeDSecureTransactionStatus'
        threeDSecureTansactionStatusReason:
          $ref: '#/components/schemas/threeDSecureTransactionStatusReason'
        ecommerceIndicator:
          $ref: '#/components/schemas/ecommerceIndicator'
        threeDSecureChallengeUrl:
          $ref: '#/components/schemas/threeDSecureChallengeUrl'
        threeDSecureChallengeData:
          $ref: '#/components/schemas/threeDSecureChallengeData'
        threeDSecureAuthenticationValue:
          $ref: '#/components/schemas/threeDSecureAuthenticationValue'
        threeDSecureChallengeCompletionIndicator:
          $ref: '#/components/schemas/threeDSecureChallengeCompletionIndicator'
        threeDSecureServerTransactionId:
          $ref: '#/components/schemas/threeDSecureServerTransactionId'
        threeDSecureDirectoryServerTransactionId:
          $ref: '#/components/schemas/threeDSecureDirectoryServerTransactionId'
        threeDSecureAccessControlServerTransactionId:
          $ref: '#/components/schemas/threeDSecureAccessControlServerTransactionId'
        paymentMethod:
          $ref: '#/components/schemas/paymentMethodResponse'
        threeDSecureCardholderInformation:
          type: string
          description: Text provided by the ACS/Issuer to Cardholder during a Frictionless or Decoupled transaction. The Issuer can provide information to Cardholder.
          maxLength: 128
          example: Additional authentication is needed for this transaction, please contact (Issuer Name) at xxx-xxx-xxxx.
        threeDSecureVersion:
          $ref: '#/components/schemas/threeDSecureVersion'
        threeDSecureAuthenticationType:
          $ref: '#/components/schemas/threeDSecureAuthenticationType'
        threeDSecureAuthenticationTimestamp:
          $ref: '#/components/schemas/threeDSecureAuthenticationTimestamp'
    threeDSecureChallengeResponseData:
      type: string
      description: Response data from the challenge
      maxLength: 200
      example: TBD
    lookupRequest:
      title: challengeFlowRequest
      description: The point of the 3-D Secure flow is to verify that the true cardholder is a part of the authorization. The challenge flow is used to present a way of authenticating the cardholder using e.g. OTP or a federated identification method.
      type: object
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/idempotencyKey'
        threeDSecureChallengeResponseData:
          $ref: '#/components/schemas/threeDSecureChallengeResponseData'
      required:
        - idempotencyKey
        - threeDSecureChallengeResponseData
    cardLookupRequest:
      title: cardLookupRequest
      description: The card_lookup request verifies the applicability of 3DS on the card and returns the 3DS version supported by the card. It also returns the 3DS Method URL and 3DS Method Data for submitting a device fingerprinting POST to issuer’s ACS.
      type: object
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/idempotencyKey'
        orderId:
          $ref: '#/components/schemas/orderId'
        paymentMethodId:
          $ref: '#/components/schemas/resourceId'
        paymentMethod:
          $ref: '#/components/schemas/paymentMethodRequest'
        threeDSecureNotificationUrl:
          $ref: '#/components/schemas/threeDSecureNotificationUrl'
      required:
        - idempotencyKey
        - orderId
        - threeDSecureNotificationUrl
        - merchantId
    threeDSecureMethodUrl:
      type: string
      format: uri
      description: Returns the URL for the Device Fingerprinting step.
      minLength: 1
      maxLength: 256
      example: https://developer.moneris.com/
    threeDSecureMethodData:
      type: string
      description: Data that must be posted to 3DS Method URL for the Device Fingerprinting step.
      minLength: 1
      maxLength: 254
    cardLookupResponse:
      title: cardLookupResponse
      type: object
      properties:
        cardLookupId:
          $ref: '#/components/schemas/resourceId'
        merchantId:
          $ref: '#/components/schemas/merchantId'
        orderId:
          $ref: '#/components/schemas/orderId'
        threeDSecureServerTransactionId:
          $ref: '#/components/schemas/threeDSecureServerTransactionId'
        threeDSecureDirectoryServerTransactionId:
          $ref: '#/components/schemas/threeDSecureDirectoryServerTransactionId'
        paymentMethod:
          $ref: '#/components/schemas/paymentMethodResponse'
        threeDSecureVersion:
          $ref: '#/components/schemas/threeDSecureVersion'
        threeDSecureMethodUrl:
          $ref: '#/components/schemas/threeDSecureMethodUrl'
        threeDSecureMethodData:
          $ref: '#/components/schemas/threeDSecureMethodData'
  examples:
    InvalidListRequestErrorResponse:
      summary: Invalid query parameter
      value:
        type: https://developer.moneris.com/en/More/Testing/Response%20Codes
        title: INVALID_QUERY_PARAMETER
        status: 400
        detail: null
        instance: null
        category: INVALID_REQUEST_ERROR
        errors:
          - parameter: created_from
            value: 2019/07/30
            reasonCode: INVALID_FORMAT
    regularPurchaseWithPaymentMethodId:
      summary: Regular Purchase With Payment Method Id
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac1
        orderId: 1q2w3e4r5t6t78
        invoiceNumber: 1a2s3d45v6
        amount:
          amount: 16000
          currency: CAD
        amountDetails:
          subTotalAmount:
            amount: 14000
            currency: CAD
          tipAmount:
            amount: 150
            currency: CAD
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
        storePaymentMethod: DO_NOT_STORE
        ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        automaticCapture: true
        customData:
          property1: string
          property2: string
        dynamicDescriptor: moneris
        ipv4: 192.0.2.146
        ipv6: 2345:0425:2CA1:0000:0000:0567:5673:23b5
    regularPurchaseWithPaymentMethod:
      summary: Regular Purchase With Payment Method Details
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac1
        orderId: 1q2w3e4r5t6t78
        invoiceNumber: 1a2s3d45v6
        amount:
          amount: 16000
          currency: CAD
        amountDetails:
          subTotalAmount:
            amount: 14000
            currency: CAD
          tipAmount:
            amount: 150
            currency: CAD
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          paymentMethodData:
            paymentMethodType: CARD
            card:
              cardNumber: '4444111122223333'
              expiryMonth: 1
              expiryYear: 2025
              cardSecurityCode: 123
        storePaymentMethod: DO_NOT_STORE
        ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        automaticCapture: true
        customData:
          property1: string
          property2: string
        dynamicDescriptor: moneris
        ipv4: 192.0.2.146
        ipv6: 2345:0425:2CA1:0000:0000:0567:5673:23b5
    preAuthorizationWithPaymentMethodId:
      summary: Pre-Authorization With Payment Method Id
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac1
        orderId: 1q2w3e4r5t6t78
        invoiceNumber: 1a2s3d45v6
        amount:
          amount: 16000
          currency: CAD
        amountDetails:
          subTotalAmount:
            amount: 14000
            currency: CAD
          tipAmount:
            amount: 150
            currency: CAD
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
        storePaymentMethod: DO_NOT_STORE
        ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        automaticCapture: false
        customData:
          property1: string
          property2: string
        dynamicDescriptor: moneris
        ipv4: 192.0.2.146
        ipv6: 2345:0425:2CA1:0000:0000:0567:5673:23b5
    PurchaseCompletedResponse:
      summary: Successful Purchase
      value:
        paymentId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
        merchantId: '0123456789101'
        orderId: 1q2w3e4r5t6t78
        invoiceNumber: 1a2s3d45v6
        transactionDateTime: '2019-07-30T06:43:40.252Z'
        createdAt: '2019-07-30T06:43:40.252Z'
        modifiedAt: '2019-07-30T06:43:40.252Z'
        amount:
          amount: 16000
          currency: CAD
        authorizedAmount:
          amount: 16000
          currency: CAD
        capturableAmount:
          amount: 0
          currency: CAD
        amountDetails:
          subTotalAmount:
            amount: 14000
            currency: CAD
          tipAmount:
            amount: 150
            currency: CAD
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
          merchantId: '0123456789101'
          cardholderInformation: null
          contactDetails: null
          billingAddress: null
          paymentMethodType: CARD
          paymentMethodInformation:
            cardInformation:
              bankIdentificationNumber: '123456'
              lastFour: '1234'
              expiryMonth: 1
              expiryYear: 2025
              cardBrand: MASTERCARD
              cardType: CREDIT
              cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
              issuer: RBC
            paymentAccountReference: '11112222333344445555666677778'
          paymentMethodStored: DO_NOT_STORE
          createdAt: '2019-07-30T06:43:40.252Z'
          modifiedAt: null
          customData:
            property1: string
            property2: string
        paymentStatus: SUCCEEDED
        transactionDetails:
          transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
          isoResponseCode: 0
          responseCode: 1
          message: approved
          ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        checkResults:
          addressVerificationServiceResultCode: M
          cardSecurityCodeResultCode: MATCH
          threeDSecureAuthenticationValueResultCode: VISA_CAVV_PASSED_VALIDATION_ATTEMPTED
        cardOnFileResponse: null
        refunds: null
        customData:
          property1: string
          property2: string
    PreauthorizationCompletedResponse:
      summary: Successful Pre-Authorization
      value:
        paymentId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
        merchantId: '0123456789101'
        orderId: 1q2w3e4r5t6t78
        invoiceNumber: 1a2s3d45v6
        transactionDateTime: '2019-07-30T06:43:40.252Z'
        createdAt: '2019-07-30T06:43:40.252Z'
        modifiedAt: '2019-07-30T06:43:40.252Z'
        amount:
          amount: 16000
          currency: CAD
        authorizedAmount:
          amount: 16000
          currency: CAD
        capturableAmount:
          amount: 16000
          currency: CAD
        amountDetails:
          subTotalAmount:
            amount: 14000
            currency: CAD
          tipAmount:
            amount: 150
            currency: CAD
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
          merchantId: '0123456789101'
          cardholderInformation: null
          contactDetails: null
          billingAddress: null
          paymentMethodType: CARD
          paymentMethodInformation:
            cardInformation:
              bankIdentificationNumber: '123456'
              lastFour: '1234'
              expiryMonth: 1
              expiryYear: 2025
              cardBrand: MASTERCARD
              cardType: CREDIT
              cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
              issuer: RBC
            paymentAccountReference: '11112222333344445555666677778'
          paymentMethodStored: DO_NOT_STORE
          createdAt: '2019-07-30T06:43:40.252Z'
          modifiedAt: null
          customData:
            property1: string
            property2: string
        paymentStatus: AUTHORIZED
        transactionDetails:
          transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
          isoResponseCode: 27
          responseCode: 0
          message: approved
          ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        checkResults:
          addressVerificationServiceResultCode: M
          cardSecurityCodeResultCode: MATCH
          threeDSecureAuthenticationValueResultCode: VISA_CAVV_PASSED_VALIDATION_ATTEMPTED
        cardOnFileResponse: null
        refunds: null
        customData:
          property1: string
          property2: string
    DeclineErrorResponse:
      value:
        type: https://developer.moneris.com/en/More/Testing/Response%20Codes
        title: EXCESS PIN TRIES
        status: 400
        detail: 052-38 - PIN retries exceeded
        instance: /payments/20c3ee41-2560-4645-b84f-631fb08819de
        category: DECLINED_ERROR
        errors: []
    InvalidRequestErrorResponse:
      value:
        type: https://developer.moneris.com/en/More/Testing/Response%20Codes
        title: INVALID_ADDRESS
        status: 400
        detail: null
        instance: null
        category: INVALID_REQUEST_ERROR
        errors:
          - reasonCode: INVALID_FORMAT
            parameterName: address.postalCode
            parameterValue: MAP3J8
    IdempotencyRequestErrorResponse:
      value:
        type: https://developer.moneris.com/en/More/Testing/Response%20Codes
        title: IDEMPOTENCY_KEY_ALREADY_EXISTS
        status: 409
        detail: null
        instance: null
        category: IDEMPOTENCY_ERROR
        errors: []
    PurchaseDeclinedResponse:
      summary: Purchase Declined
      value:
        paymentId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
        merchantId: '0123456789101'
        orderId: 1q2w3e4r5t6t78
        invoiceNumber: 1a2s3d45v6
        transactionDateTime: '2019-07-30T06:43:40.252Z'
        createdAt: '2019-07-30T06:43:40.252Z'
        modifiedAt: '2019-07-30T06:43:40.252Z'
        amount:
          amount: 16000
          currency: CAD
        authorizedAmount:
          amount: 0
          currency: CAD
        capturableAmount:
          amount: 0
          currency: CAD
        amountDetails:
          subTotalAmount:
            amount: 14000
            currency: CAD
          tipAmount:
            amount: 150
            currency: CAD
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
          merchantId: '0123456789101'
          cardholderInformation: null
          contactDetails: null
          billingAddress: null
          paymentMethodType: CARD
          paymentMethodInformation:
            cardInformation:
              bankIdentificationNumber: '123456'
              lastFour: '1234'
              expiryMonth: 1
              expiryYear: 2025
              cardBrand: MASTERCARD
              cardType: CREDIT
              cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
              issuer: RBC
            paymentAccountReference: '11112222333344445555666677778'
          paymentMethodStored: DO_NOT_STORE
          createdAt: '2019-07-30T06:43:40.252Z'
          modifiedAt: null
          customData:
            property1: string
            property2: string
        paymentStatus: DECLINED
        transactionDetails:
          transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
          isoResponseCode: 421
          responseCode: 43
          message: Stolen card, pick up.
          ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        checkResults:
          addressVerificationServiceResultCode: M
          cardSecurityCodeResultCode: MATCH
          threeDSecureAuthenticationValueResultCode: VISA_CAVV_PASSED_VALIDATION_ATTEMPTED
        cardOnFileResponse: null
        refunds: null
        customData:
          property1: string
          property2: string
    PurchaseDeclinedRetryResponse:
      summary: Purchase Declined with Retry
      value:
        paymentId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
        merchantId: '0123456789101'
        orderId: 1q2w3e4r5t6t78
        invoiceNumber: 1a2s3d45v6
        transactionDateTime: '2019-07-30T06:43:40.252Z'
        createdAt: '2019-07-30T06:43:40.252Z'
        modifiedAt: '2019-07-30T06:43:40.252Z'
        amount:
          amount: 16000
          currency: CAD
        authorizedAmount:
          amount: 0
          currency: CAD
        capturableAmount:
          amount: 0
          currency: CAD
        amountDetails:
          subTotalAmount:
            amount: 14000
            currency: CAD
          tipAmount:
            amount: 150
            currency: CAD
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
          merchantId: '0123456789101'
          cardholderInformation: null
          contactDetails: null
          billingAddress: null
          paymentMethodType: CARD
          paymentMethodInformation:
            cardInformation:
              bankIdentificationNumber: '123456'
              lastFour: '1234'
              expiryMonth: 1
              expiryYear: 2025
              cardBrand: MASTERCARD
              cardType: CREDIT
              cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
              issuer: RBC
            paymentAccountReference: '11112222333344445555666677778'
          paymentMethodStored: DO_NOT_STORE
          createdAt: '2019-07-30T06:43:40.252Z'
          modifiedAt: null
          customData:
            property1: string
            property2: string
        paymentStatus: DECLINED_RETRY
        transactionDetails:
          transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
          isoResponseCode: 416
          responseCode: 79
          message: Life cycle declines.
          ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        checkResults:
          addressVerificationServiceResultCode: M
          cardSecurityCodeResultCode: MATCH
          threeDSecureAuthenticationValueResultCode: VISA_CAVV_PASSED_VALIDATION_ATTEMPTED
        cardOnFileResponse: null
        refunds: null
        customData:
          property1: string
          property2: string
    PurchaseCanceledResponse:
      summary: Purchase Canceled
      value:
        paymentId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
        merchantId: '0123456789101'
        orderId: 1q2w3e4r5t6t78
        invoiceNumber: 1a2s3d45v6
        transactionDateTime: '2019-07-30T06:43:40.252Z'
        createdAt: '2019-07-30T06:43:40.252Z'
        modifiedAt: '2019-07-30T06:43:40.252Z'
        amount:
          amount: 16000
          currency: CAD
        authorizedAmount:
          amount: 16000
          currency: CAD
        capturableAmount:
          amount: 0
          currency: CAD
        amountDetails:
          subTotalAmount:
            amount: 14000
            currency: CAD
          tipAmount:
            amount: 150
            currency: CAD
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
          merchantId: '0123456789101'
          cardholderInformation: null
          contactDetails: null
          billingAddress: null
          paymentMethodType: CARD
          paymentMethodInformation:
            cardInformation:
              bankIdentificationNumber: '123456'
              lastFour: '1234'
              expiryMonth: 1
              expiryYear: 2025
              cardBrand: MASTERCARD
              cardType: CREDIT
              cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
              issuer: RBC
            paymentAccountReference: '11112222333344445555666677778'
          paymentMethodStored: DO_NOT_STORE
          createdAt: '2019-07-30T06:43:40.252Z'
          modifiedAt: null
          customData:
            property1: string
            property2: string
        paymentStatus: CANCELED
        transactionDetails:
          transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
          isoResponseCode: 0
          responseCode: 1
          message: approved
          ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        checkResults:
          addressVerificationServiceResultCode: M
          cardSecurityCodeResultCode: MATCH
          threeDSecureAuthenticationValueResultCode: VISA_CAVV_PASSED_VALIDATION_ATTEMPTED
        cardOnFileResponse: null
        refunds: null
        customData:
          property1: string
          property2: string
    InvalidPurchaseErrorResponse:
      summary: Purchase already completed
      value:
        type: https://developer.moneris.com/en/More/Testing/Response%20Codes
        title: INVALID_STATE
        status: 400
        detail: Invalid purchase state
        instance: /payments/20c3ee41-2560-4645-b84f-631fb08819de
        category: INVALID_REQUEST_ERROR
    cardPaymentMethodRequest:
      summary: Card Payment Method request
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac2
        cardholderInformation:
          cardholderName: John Doe
          companyName: SP Ltd
        contactDetails:
          phoneNumber: 1-866-319-7450
          email: moneris@moneris.com
        billingAddress:
          unitNumber: 123A
          streetNumber: '3300'
          streetName: Bloor Street West
          city: Toronto
          province: Ontario
          postalCode: M8X 2X2
          country: CA
        paymentMethodData:
          paymentMethodType: CARD
          card:
            cardNumber: '4444111122223333'
            expiryMonth: 1
            expiryYear: 2023
            cardSecurityCode: 123
        customData:
          property1: string
          property2: string
    temporaryTokenPaymentMethodRequest:
      summary: Temporary Token Payment Method request
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac2
        cardholderInformation: null
        contactDetails: null
        billingAddress: null
        paymentMethodData:
          paymentMethodType: TEMPORARY_TOKEN
          temporaryToken: ot-HCUeCFtXJfEZSSUqvUJk0
        customData:
          property1: string
          property2: string
    permanentTokenPaymentMethodRequest:
      summary: Permanent Token Payment Method request
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac2
        cardholderInformation: null
        contactDetails: null
        billingAddress: null
        paymentMethodData:
          paymentMethodType: PERMANENT_TOKEN
          permanentToken: HCUeCFtXJfEZSSUqvUJk0
        customData:
          property1: string
          property2: string
    updateCardPaymentMethodRequest:
      summary: Card Payment Method request
      value:
        cardholderInformation:
          cardholderName: John Doe
          companyName: SP Ltd
        contactDetails:
          phoneNumber: 1-866-319-7450
          email: moneris@moneris.com
        billingAddress:
          unitNumber: 123A
          streetNumber: '3300'
          streetName: Bloor Street West
          city: Toronto
          province: Ontario
          postalCode: M8X 2X2
          country: CA
        paymentMethodData:
          paymentMethodType: CARD
          card:
            cardNumber: '4444111122223333'
            expiryMonth: 12
            expiryYear: 2033
            cardSecurityCode: 123
        customData:
          property1: string
          property2: string
    updateTemporaryTokenPaymentMethodRequest:
      summary: Temporary Token Payment Method request
      value:
        cardholderInformation: null
        contactDetails: null
        billingAddress: null
        paymentMethodData:
          paymentMethodType: TEMPORARY_TOKEN
          temporaryToken: ot-HCUeCFtXJfEZSSUqvXYl9
    updatePermanentTokenPaymentMethodRequest:
      summary: Permanent Token Payment Method request
      value:
        cardholderInformation: null
        contactDetails: null
        billingAddress: null
        paymentMethodData:
          paymentMethodType: PERMANENT_TOKEN
          permanentToken: HCUeCFtXJfEZSSUqvFRu9
        customData:
          property1: string
    concurrentRequestErrorResponse:
      summary: Concurrent Access Error
      value:
        type: https://developer.moneris.com/en/More/Testing/Response%20Codes
        title: CONCURRENCY_ERROR
        status: 409
        detail: null
        instance: null
        category: API_ERROR
        errors: []
    matchingRefundRequest:
      summary: Matching Refund
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac2
        paymentId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
        orderId: 1q2w3e4r5t6t78
        invoiceNumber: 1a2s3d45v6
        refundAmount:
          amount: 1600
          currency: CAD
        dynamicDescriptor: moneris
        cofInformation: null
        ipv4: 104.75.173.179
        ipv6: 2600:1401:2::8a
        ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        reason: Defective product
        customData:
          property1: string
          property2: string
    InvalidRefundErrorResponse:
      summary: Invalid Matching Refund
      value:
        type: https://developer.moneris.com/en/More/Testing/Response%20Codes
        title: INVALID_PAYMENT
        status: 400
        detail: Invalid payment Id or payment Id not found
        instance: /payments/pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
        category: INVALID_REQUEST_ERROR
    exp-refundResponse_DeclineErrorResponse:
      summary: Refund declined
      value:
        type: https://developer.moneris.com/en/More/Testing/Response%20Codes
        title: EXPIRED CARD
        status: 400
        detail: 051-54 - Expired Card
        instance: /refunds/20c3ee41-2560-4645-b84f-631fb08819de
        category: DECLINED_ERROR
        errors: []
    SucceededRefundResponse:
      summary: Refund succeeded
      value:
        refundId: ri0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
        merchantId: '0123456789101'
        paymentMethod:
          paymentMethodId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
          merchantId: '0123456789101'
          cardholderInformation:
            cardholderName: John Doe
            companyName: SP Ltd
          contactDetails:
            phoneNumber: 1-866-319-7450
            email: moneris@moneris.com
          billingAddress:
            unitNumber: 123A
            streetNumber: '3300'
            streetName: Bloor Street West
            city: Toronto
            province: Ontario
            postalCode: M8X 2X2
            country: CA
          paymentMethodType: CARD
          paymentMethodInformation:
            cardInformation:
              bankIdentificationNumber: '123456'
              lastFour: '1234'
              expiryMonth: 1
              expiryYear: 2023
              cardBrand: MASTERCARD
              cardType: CREDIT
              cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
              issuer: RBC
            paymentAccountReference: '11112222333344445555666677778'
          paymentMethodStored: DO_NOT_STORE
          createdAt: '2019-07-30T06:43:40.252Z'
          modifiedAt: '2019-07-30T06:43:40.252Z'
          customData:
            property1: string
            property2: string
        createdAt: '2019-07-30T06:43:40.252Z'
        modifiedAt: '2019-07-30T06:43:40.252Z'
        refundAmount:
          amount: 1600
          currency: CAD
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        status: SUCCEEDED
        statusDetails:
          transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
          isoResponseCode: 1
          responseCode: 1
          message: SUCCESS
          ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        reason: Defective product
        cardOnFileResponse: null
        customData:
          property1: string
          property2: string
    DeclinedRefundResponse:
      summary: Refund succeeded
      value:
        refundId: ri0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
        merchantId: '0123456789101'
        paymentMethod:
          paymentMethodId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
          merchantId: '0123456789101'
          cardholderInformation:
            cardholderName: John Doe
            companyName: SP Ltd
          contactDetails:
            phoneNumber: 1-866-319-7450
            email: moneris@moneris.com
          billingAddress:
            unitNumber: 123A
            streetNumber: '3300'
            streetName: Bloor Street West
            city: Toronto
            province: Ontario
            postalCode: M8X 2X2
            country: CA
          paymentMethodType: CARD
          paymentMethodInformation:
            cardInformation:
              bankIdentificationNumber: '123456'
              lastFour: '1234'
              expiryMonth: 1
              expiryYear: 2023
              cardBrand: MASTERCARD
              cardType: CREDIT
              cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
              issuer: RBC
            paymentAccountReference: '11112222333344445555666677778'
          paymentMethodStored: DO_NOT_STORE
          createdAt: '2019-07-30T06:43:40.252Z'
          modifiedAt: '2019-07-30T06:43:40.252Z'
          customData:
            property1: string
            property2: string
        createdAt: '2019-07-30T06:43:40.252Z'
        modifiedAt: '2019-07-30T06:43:40.252Z'
        refundAmount:
          amount: 1600
          currency: CAD
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        status: DECLINED
        statusDetails:
          transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
          isoResponseCode: 51
          responseCode: 54
          message: Expired Card
          ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        reason: Defective product
        cardOnFileResponse: null
        customData:
          property1: string
          property2: string
    validationRequestWithPaymentMethodId:
      summary: With Payment Method Id
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac1
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
        storePaymentMethod: DO_NOT_STORE
        ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        automaticCapture: true
        customData:
          property1: string
          property2: string
        dynamicDescriptor: moneris
        ipv4: 192.0.2.146
        ipv6: 2345:0425:2CA1:0000:0000:0567:5673:23b5
    validationRequestWithPaymentMethodData:
      summary: With Payment Method Details
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac1
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          cardholderInformation:
            cardholderName: John Doe
            companyName: Gallenkamp
          billingAddress:
            unitNumber: 123A
            streetNumber: '3300'
            streetName: Bloor Street West
            city: Toronto
            province: Ontario
            postalCode: M8X 2X2
            country: CA
          paymentMethodData:
            paymentMethodType: CARD
            card:
              cardNumber: '4444111122223333'
              expiryMonth: 1
              expiryYear: 2025
              cardSecurityCode: 123
        storePaymentMethod: DO_NOT_STORE
        ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        automaticCapture: true
        customData:
          property1: string
          property2: string
        dynamicDescriptor: moneris
        ipv4: 192.0.2.146
        ipv6: 2345:0425:2CA1:0000:0000:0567:5673:23b5
    exp-validationResponse_DeclineErrorResponse:
      value:
        type: https://developer.moneris.com/en/More/Testing/Response%20Codes
        title: EXCESS PIN TRIES
        status: 400
        detail: 052-38 - PIN retries exceeded
        instance: /validations/20c3ee41-2560-4645-b84f-631fb08819de
        category: DECLINED_ERROR
        errors: []
    ValidationSucceededResponse:
      summary: Successful Validation
      value:
        validationId: vi0105ARZ3NDEKTSV4RRFFQ69G5FAV
        merchantId: '0123456789101'
        orderId: 1q2w3e4r5t6t78
        invoiceNumber: 1a2s3d45v6
        transactionDateTime: '2019-07-30T06:43:40.252Z'
        createdAt: '2019-07-30T06:43:40.252Z'
        modifiedAt: null
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
          merchantId: '0123456789101'
          cardholderInformation:
            cardholderName: John Doe
            companyName: SP Ltd
          contactDetails: null
          billingAddress:
            unitNumber: 123A
            streetNumber: '3300'
            streetName: Bloor Street West
            city: Toronto
            province: Ontario
            postalCode: M8X 2X2
            country: CA
          paymentMethodType: CARD
          paymentMethodInformation:
            cardInformation:
              bankIdentificationNumber: '123456'
              lastFour: '1234'
              expiryMonth: 1
              expiryYear: 2025
              cardBrand: MASTERCARD
              cardType: CREDIT
              cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
              issuer: RBC
            paymentAccountReference: '11112222333344445555666677778'
          paymentMethodStored: DO_NOT_STORE
          createdAt: '2019-07-30T06:43:40.252Z'
          modifiedAt: null
          customData:
            property1: string
            property2: string
        validationStatus: SUCCEEDED
        transactionDetails:
          transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
          isoResponseCode: 0
          responseCode: 1
          message: approved
          ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        checkResults:
          addressVerificationServiceResultCode: M
          cardSecurityCodeResultCode: MATCH
          threeDSecureAuthenticationValueResultCode: VISA_CAVV_PASSED_VALIDATION_ATTEMPTED
        cardOnFileResponse: null
        customData:
          property1: string
          property2: string
    ValidationDeclinedRetryResponse:
      summary: Validation Declined with Retry
      value:
        validationId: vi0105ARZ3NDEKTSV4RRFFQ69G5FAV
        merchantId: '0123456789101'
        orderId: 1q2w3e4r5t6t78
        invoiceNumber: 1a2s3d45v6
        transactionDateTime: '2019-07-30T06:43:40.252Z'
        createdAt: '2019-07-30T06:43:40.252Z'
        modifiedAt: null
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
          merchantId: '0123456789101'
          cardholderInformation:
            cardholderName: John Doe
            companyName: SP Ltd
          contactDetails: null
          billingAddress:
            unitNumber: 123A
            streetNumber: '3300'
            streetName: Bloor Street West
            city: Toronto
            province: Ontario
            postalCode: M8X 2X2
            country: CA
          paymentMethodType: CARD
          paymentMethodInformation:
            cardInformation:
              bankIdentificationNumber: '123456'
              lastFour: '1234'
              expiryMonth: 1
              expiryYear: 2025
              cardBrand: MASTERCARD
              cardType: CREDIT
              cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
              issuer: RBC
            paymentAccountReference: '11112222333344445555666677778'
          paymentMethodStored: DO_NOT_STORE
          createdAt: '2019-07-30T06:43:40.252Z'
          modifiedAt: null
          customData:
            property1: string
            property2: string
        validationStatus: DECLINED_RETRY
        transactionDetails:
          transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
          isoResponseCode: 416
          responseCode: 79
          message: Life cycle declines.
          ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        checkResults:
          addressVerificationServiceResultCode: M
          cardSecurityCodeResultCode: MATCH
          threeDSecureAuthenticationValueResultCode: VISA_CAVV_PASSED_VALIDATION_ATTEMPTED
        cardOnFileResponse: null
        customData:
          property1: string
          property2: string
    ValidationDeclinedResponse:
      summary: Validation Declined
      value:
        validationId: vi0105ARZ3NDEKTSV4RRFFQ69G5FAV
        merchantId: '0123456789101'
        orderId: 1q2w3e4r5t6t78
        invoiceNumber: 1a2s3d45v6
        transactionDateTime: '2019-07-30T06:43:40.252Z'
        createdAt: '2019-07-30T06:43:40.252Z'
        modifiedAt: null
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
          merchantId: '0123456789101'
          cardholderInformation:
            cardholderName: John Doe
            companyName: SP Ltd
          contactDetails: null
          billingAddress:
            unitNumber: 123A
            streetNumber: '3300'
            streetName: Bloor Street West
            city: Toronto
            province: Ontario
            postalCode: M8X 2X2
            country: CA
          paymentMethodType: CARD
          paymentMethodInformation:
            cardInformation:
              bankIdentificationNumber: '123456'
              lastFour: '1234'
              expiryMonth: 1
              expiryYear: 2025
              cardBrand: MASTERCARD
              cardType: CREDIT
              cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
              issuer: RBC
            paymentAccountReference: '11112222333344445555666677778'
          paymentMethodStored: DO_NOT_STORE
          createdAt: '2019-07-30T06:43:40.252Z'
          modifiedAt: null
          customData:
            property1: string
            property2: string
        validationStatus: DECLINED
        transactionDetails:
          transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
          isoResponseCode: 421
          responseCode: 43
          message: Stolen card, pick up.
          ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        checkResults:
          addressVerificationServiceResultCode: M
          cardSecurityCodeResultCode: MATCH
          threeDSecureAuthenticationValueResultCode: VISA_CAVV_PASSED_VALIDATION_ATTEMPTED
        cardOnFileResponse: null
        customData:
          property1: string
          property2: string
  responses:
    invalidListbadRequest:
      description: Bad Request.
      headers:
        Api-Version:
          $ref: '#/components/headers/apiVersion'
        X-Correlation-Id:
          $ref: '#/components/headers/correlationId'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
          examples:
            idempotency_error:
              $ref: '#/components/examples/InvalidListRequestErrorResponse'
    unauthorized:
      description: Not authorized. The user does not have a valid API Key or Access Token.
      headers:
        Api-Version:
          $ref: '#/components/headers/apiVersion'
        X-Correlation-Id:
          $ref: '#/components/headers/correlationId'
        WWW-Authenticate:
          schema:
            type: string
            example: Bearer, error="invalid_token"
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            type: https://developer.moneris.com/en/More/Testing/Response%20Codes
            title: UNAUTHORIZED_REQUEST
            status: 401
            detail: null
            instance: null
            category: UNAUTHORIZED_ERROR
            errors: []
    forbidden:
      description: Forbidden. The user does not have permission to access the requested resource.
      headers:
        Api-Version:
          $ref: '#/components/headers/apiVersion'
        X-Correlation-Id:
          $ref: '#/components/headers/correlationId'
        WWW-Authenticate:
          schema:
            type: string
            example: Bearer, error="insufficient_scope"
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            type: https://developer.moneris.com/en/More/Testing/Response%20Codes
            title: FORBIDDEN_REQUEST
            status: 403
            detail: null
            instance: null
            category: UNAUTHORIZED_ERROR
            errors: []
    tooManyRequests:
      description: Too Many Requests
      headers:
        Api-Version:
          $ref: '#/components/headers/apiVersion'
        X-Correlation-Id:
          $ref: '#/components/headers/correlationId'
        X-RateLimit-Limit:
          $ref: '#/components/headers/rateLimitCount'
        X-RateLimit-Remaining:
          $ref: '#/components/headers/rateLimitRemaining'
        X-RateLimit-Reset:
          $ref: '#/components/headers/rateLimitReset'
        Retry-After:
          $ref: '#/components/headers/rateLimitReset'
    internalServer:
      description: Unexpected error.
      headers:
        Api-Version:
          $ref: '#/components/headers/apiVersion'
        X-Correlation-Id:
          $ref: '#/components/headers/correlationId'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            type: https://developer.moneris.com/en/More/Testing/Response%20Codes
            title: INTERNAL_SERVER_ERROR
            status: 500
            detail: null
            instance: null
            category: INTERNAL_SERVER_ERROR
            errors: []
    notFound:
      description: Not Found.
      headers:
        Api-Version:
          $ref: '#/components/headers/apiVersion'
        X-Correlation-Id:
          $ref: '#/components/headers/correlationId'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            type: https://developer.moneris.com/en/More/Testing/Response%20Codes
            title: NOT_FOUND
            status: 404
            detail: null
            instance: /payments/pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
            category: INVALID_REQUEST_ERROR
            errors: []
    conflict:
      description: Request could not be completed due to a conflict with resource state or existing idempotency key.
      headers:
        Api-Version:
          $ref: '#/components/headers/apiVersion'
        X-Correlation-Id:
          $ref: '#/components/headers/correlationId'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
          examples:
            idempotency_error:
              $ref: '#/components/examples/IdempotencyRequestErrorResponse'
    badRequest:
      description: Bad Request.
      headers:
        Api-Version:
          $ref: '#/components/headers/apiVersion'
        X-Correlation-Id:
          $ref: '#/components/headers/correlationId'

      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
    concurrencyConflict:
      description: Request could not be completed due to a concurrent access issue.
      headers:
        Api-Version:
          $ref: '#/components/headers/apiVersion'
        X-Correlation-Id:
          $ref: '#/components/headers/correlationId'

      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
          examples:
            concurrency_error:
              $ref: '#/components/examples/concurrentRequestErrorResponse'
